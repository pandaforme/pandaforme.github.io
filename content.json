{"meta":{"title":"Programming blog","subtitle":"This is a programming blog","description":"This is a programming blog","author":"pandaforme","url":"https://pandaforme.github.io"},"pages":[{"title":"","date":"2018-05-01T04:29:44.452Z","updated":"2018-05-01T04:29:44.452Z","comments":true,"path":"hexo-admin-ehc-images.json","permalink":"https://pandaforme.github.io/hexo-admin-ehc-images.json","excerpt":"","text":"[{&quot;name&quot;:&quot;DASHENG-900x700-1.png&quot;,&quot;date&quot;:1518959551960},{&quot;name&quot;:&quot;DASHENG-900x700-2.png&quot;,&quot;date&quot;:1518959599098},{&quot;name&quot;:&quot;DASHENG-900x700-3.png&quot;,&quot;date&quot;:1518959609913},{&quot;name&quot;:&quot;DASHENG-900x700-4.png&quot;,&quot;date&quot;:1518959618105}]"},{"title":"categories","date":"2016-12-09T11:09:58.000Z","updated":"2016-12-09T11:12:23.000Z","comments":false,"path":"categories/index.html","permalink":"https://pandaforme.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2016-12-07T11:27:08.000Z","updated":"2016-12-07T11:28:51.000Z","comments":false,"path":"tags/index.html","permalink":"https://pandaforme.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"[Scala] The importance of recursion","slug":"Scala-The-importance-of-recursion","date":"2017-04-26T09:55:00.000Z","updated":"2017-05-13T16:20:49.000Z","comments":true,"path":"2017/04/26/Scala-The-importance-of-recursion/","link":"","permalink":"https://pandaforme.github.io/2017/04/26/Scala-The-importance-of-recursion/","excerpt":"","text":"&#x905E;&#x8FF4;&#x5728;functional programming&#x4E16;&#x754C;&#x4E2D;&#x662F;&#x4E0D;&#x51C6;&#x8A31;&#x6709;mutable&#x8B8A;&#x6578;&#xFF0C;&#x610F;&#x5473;&#x8457;&#x6211;&#x5011;&#x719F;&#x6089;&#x7684; while, for &#x8FF4;&#x5708;&#x90FD;&#x662F;&#x7981;&#x6B62;&#x4F7F;&#x7528;&#x3002;&#x90A3;&#x6211;&#x5011;&#x61C9;&#x8A72;&#x600E;&#x9EBC;&#x8FA6;&#x5462;&#xFF1F; &#x9019;&#x908A;&#x6703;&#x8209;&#x500B;&#x6578;&#x500B;&#x4F8B;&#x5B50;&#xFF0C;&#x4F86;&#x89E3;&#x91CB;&#x662F;&#x900F;&#x904E;&#x905E;&#x8FF4;&#x65B9;&#x5F0F;&#x4F86;&#x5B8C;&#x6210; while &#x6216; for &#x8FF4;&#x5708;&#x3002; &#x5F9E;&#x4E00;&#x500B;&#x4E32;&#x5217;&#x4E2D;&#x627E;&#x51FA;&#x6700;&#x5927;&#x503C;&#x5982;&#x679C;&#x5728; Java &#x6211;&#x5011;&#x6703;&#x600E;&#x9EBC;&#x505A;&#x5462;&#xFF1F; &#x5BA3;&#x500B;&#x4E00;&#x500B;&#x8B8A;&#x6578;(max)&#x5B58;&#x653E;&#x76EE;&#x524D;&#x7684;&#x6700;&#x5927;&#x503C; &#x900F;&#x904E;while &#x6216; for &#x8FF4;&#x5708;&#xFF0C;&#x5C07;&#x4E32;&#x5217;&#x4E2D;&#x7684;&#x6BCF;&#x500B;&#x5143;&#x7D20;&#x8DDF;&#x6211;&#x5011;&#x5BA3;&#x544A;&#x7684;&#x8B8A;&#x6578;(max)&#x6BD4;&#x5927;&#x5C0F;2.1 &#x82E5;&#x5143;&#x7D20;&#x7684;&#x503C;&#x5927;&#x65BC;max&#xFF0C;max&#x7684;&#x503C;&#x5C31;&#x6539;&#x70BA;&#x6B64;&#x5143;&#x7D20;&#x7684;&#x503C;2.2 &#x82E5;&#x5143;&#x7D20;&#x7684;&#x503C;&#x5C0F;&#x65BC;&#x6216;&#x7B49;&#x65BC;max&#xFF0C;&#x4E0D;&#x505A;&#x4EFB;&#x4F55;&#x4E8B; 123456var max = Int.MinValuefor(i &lt;- List(1, 2, 3, 4, 5)){ if(i &gt; max) max = i} &#x900F;&#x904E;&#x905E;&#x8FF4;&#x65B9;&#x5F0F;&#x6211;&#x5011;&#x6703;&#x600E;&#x9EBC;&#x89E3;&#x6C7A;&#x5462;&#xFF1F; 12345678910111213findMax(List(1, 2, 3, 4, 5))def findMax(list: List[Int]): Int = { list match{ // &#x5047;&#x5982;&#x662F;&#x7A7A;&#x7684;&#x4E32;&#x5217;&#xFF0C;&#x6211;&#x5011;&#x56DE;&#x50B3;0 case Nil =&gt; 0 // &#x5047;&#x5982;&#x53EA;&#x6709;&#x4E00;&#x500B;&#x5143;&#x7D20;&#x7684;&#x4E32;&#x5217;&#xFF0C;&#x90A3;&#x6700;&#x5927;&#x503C;&#x5C31;&#x70BA;&#x8A72;&#x5143;&#x7D20; case h :: Nil =&gt; h // &#x4E3B;&#x8981;&#x908F;&#x8F2F; case h :: t =&gt; Math.max(h, findMax(t)) }} &#x5728;&#x8FF4;&#x5708;&#x7248;&#x672C;&#x4E2D;&#xFF0C;&#x9010;&#x4E00;&#x6BCF;&#x500B;&#x5143;&#x7D20;&#x8DDF;&#x67D0;&#x4E00;&#x500B;mutable&#x8B8A;&#x6578;&#x6BD4;&#x5927;&#x5C0F;&#x3002; &#x5728;&#x8FF4;&#x905E;&#x7248;&#x672C;&#x4E2D;&#xFF0C;&#x7B2C;&#x4E00;&#x500B;&#x5143;&#x7D20;&#x8DDF;&#x53BB;&#x9664;&#x7B2C;&#x4E00;&#x500B;&#x5143;&#x7D20;&#x7684;&#x4E32;&#x5217;&#x7684;&#x6700;&#x5927;&#x503C;&#x6BD4;&#x5927;&#x5C0F;&#x3002; &#x8FF4;&#x905E;&#x7684;&#x5BEB;&#x6CD5;&#x66F4;&#x662F;&#x7C21;&#x6F54;&#x548C;&#x8868;&#x9054;&#x51FA;&#x6574;&#x500B;&#x7A0B;&#x5F0F;&#x4E3B;&#x8981;&#x908F;&#x8F2F;&#xFF0C;&#x6211;&#x5011;&#x518D;&#x4F86;&#x591A;&#x8A66;&#x770B;&#x770B;&#x5E7E;&#x500B;&#x984C;&#x76EE;&#x3002; &#x5F9E;&#x4E00;&#x500B;&#x4E32;&#x5217;&#x4E2D;&#x627E;&#x51FA;&#x6700;&#x5C0F;&#x503C;&#x505A;&#x6CD5;&#x8DDF;&#x627E;&#x51FA;&#x6700;&#x5927;&#x503C;&#x985E;&#x4F3C;&#xFF0C;&#x7B2C;&#x4E00;&#x500B;&#x5143;&#x7D20;&#x8DDF;&#x53BB;&#x9664;&#x7B2C;&#x4E00;&#x500B;&#x5143;&#x7D20;&#x7684;&#x4E32;&#x5217;&#x7684;&#x6700;&#x5C0F;&#x503C;&#x6BD4;&#x5927;&#x5C0F;&#x3002; 12345678910111213findMin(List(1, 2, 3, 4, 5))def findMin(list: List[Int]): Int = { list match{ // &#x5047;&#x5982;&#x662F;&#x7A7A;&#x7684;&#x4E32;&#x5217;&#xFF0C;&#x6211;&#x5011;&#x56DE;&#x50B3;0 case Nil =&gt; 0 // &#x5047;&#x5982;&#x53EA;&#x6709;&#x4E00;&#x500B;&#x5143;&#x7D20;&#x7684;&#x4E32;&#x5217;&#xFF0C;&#x90A3;&#x6700;&#x5C0F;&#x503C;&#x5C31;&#x70BA;&#x8A72;&#x5143;&#x7D20; case h :: Nil =&gt; h // &#x4E3B;&#x8981;&#x908F;&#x8F2F; case h :: t =&gt; Math.min(h, findMin(t)) }} &#x6AA2;&#x67E5;&#x4E00;&#x500B;&#x4E32;&#x5217;&#x4E2D;&#x662F;&#x5426;&#x5B58;&#x5728;&#x67D0;&#x500B;&#x7279;&#x5B9A;&#x503C;&#x6AA2;&#x67E5;&#x7B2C;&#x4E00;&#x500B;&#x5143;&#x7D20;&#x662F;&#x5426;&#x7B49;&#x65BC;&#x76EE;&#x6A19;&#x503C;&#x6216;&#x662F;&#x53BB;&#x9664;&#x7B2C;&#x4E00;&#x500B;&#x5143;&#x7D20;&#x7684;&#x4E32;&#x5217;&#x6709;&#x76EE;&#x6A19;&#x503C; 12345678910111213find(List(1, 2, 3, 4, 5), 5)def find(list: List[Int], target: Int): Boolean = { list match{ // &#x5047;&#x5982;&#x662F;&#x7A7A;&#x7684;&#x4E32;&#x5217;&#xFF0C;&#x56DE;&#x50B3;false case Nil =&gt; false // &#x5047;&#x5982;&#x53EA;&#x6709;&#x4E00;&#x500B;&#x5143;&#x7D20;&#x7684;&#x4E32;&#x5217;&#xFF0C;&#x800C;&#x4E14;&#x8A72;&#x5143;&#x7D20;&#x7B49;&#x65BC;target&#xFF0C;&#x56DE;&#x50B3;true case h :: Nil if (h == target) =&gt; true // &#x4E3B;&#x8981;&#x908F;&#x8F2F; case h :: t =&gt; (h == target) || find(t, target) }} &#x53CD;&#x8F49;&#x4E00;&#x500B;&#x5B57;&#x4E32;&#x5148;&#x53CD;&#x8F49;&#x53BB;&#x9664;&#x7B2C;&#x4E00;&#x500B;&#x5B57;&#x5143;&#x7684;&#x4E32;&#x5217;&#xFF0C;&#x4E4B;&#x5F8C;&#x518D;&#x5C07;&#x7B2C;&#x4E00;&#x5B57;&#x5143;&#x653E;&#x5728;&#x6700;&#x5F8C;&#x9762; 12345678910111213reverse(&quot;I should learn scala seriously!&quot;.toList)def reverse(list: List[Char]): String = { list match { // &#x5047;&#x5982;&#x662F;&#x7A7A;&#x7684;&#x4E32;&#x5217;&#xFF0C;&#x56DE;&#x50B3;false case Nil =&gt; &quot;&quot; // &#x5047;&#x5982;&#x53EA;&#x6709;&#x4E00;&#x500B;&#x5143;&#x7D20;&#x7684;&#x4E32;&#x5217;&#xFF0C;&#x56DE;&#x50B3;&#x8A72;&#x5143;&#x7D20; case h :: Nil =&gt; h.toString // &#x4E3B;&#x8981;&#x908F;&#x8F2F; case h :: t =&gt; reverse(t) + h }} &#x5224;&#x65B7;&#x4E00;&#x500B;&#x5B57;&#x4E32;&#x662F;&#x5426;&#x70BA;&#x53E6;&#x5916;&#x4E00;&#x500B;&#x5B57;&#x4E32;&#x7684;&#x5B50;&#x5B57;&#x4E32;&#x5B50;&#x5B57;&#x4E32;&#x7684;&#x5B9A;&#x7FA9;&#xFF1A;&#x5B57;&#x6578;&#xFF0C;&#x5167;&#x5BB9;&#x548C;&#x9806;&#x5E8F;&#x9700;&#x8981;&#x7B26;&#x5408;&#xFF0C;&#x7A7A;&#x5B57;&#x4E32;&#x70BA;&#x4EFB;&#x4F55;&#x5B57;&#x4E32;&#x7684;&#x5B50;&#x5B57;&#x4E32;&#x4F8B;&#x5982;&#xFF1A; &#x201C;abc&#x201D; &#x70BA; &#x201C;XXXYYYabc&#x201D;&#x7684;&#x5B50;&#x5B57;&#x4E32; &#x201C;XXXY&#x201D; &#x70BA; &#x201C;XXXYYYabc&#x201D;&#x7684;&#x5B50;&#x5B57;&#x4E32; &#x201C;&#x201D; &#x70BA; &#x201C;XXXYYYabc&#x201D;&#x7684;&#x5B50;&#x5B57;&#x4E32; &#x201C;ABC&#x201D; &#x4E0D;&#x70BA; &#x201C;XXXYYYabc&#x201D;&#x7684;&#x5B50;&#x5B57;&#x4E32; &#x201C;QQWW&#x201D; &#x4E0D;&#x70BA; &#x201C;XXXYYYabc&#x201D;&#x7684;&#x5B50;&#x5B57;&#x4E32; &#x201C;XXXaYYY&#x201D; &#x4E0D;&#x70BA; &#x201C;XXXYYYabc&#x201D;&#x7684;&#x5B50;&#x5B57;&#x4E32; &#x5148;&#x6BD4;&#x8F03;&#x4E3B;&#x8981;&#x5B57;&#x4E32;&#x548C;&#x5B50;&#x5B57;&#x4E32;&#x7684;&#x7B2C;&#x4E00;&#x500B;&#x5B57;&#x6BCD;&#x662F;&#x5426;&#x4E00;&#x6A23;&#xFF0C; &#x82E5;&#x4E00;&#x6A23;&#x5247;&#x9019;&#x5169;&#x500B;&#x5B57;&#x4E32;&#x53BB;&#x9664;&#x7B2C;&#x4E00;&#x500B;&#x5B57;&#x6BCD;&#x7E7C;&#x7E8C;&#x6BD4; &#x82E5;&#x4E0D;&#x4E00;&#x6A23;&#xFF0C;&#x4E3B;&#x8981;&#x5B57;&#x4E32;&#x53BB;&#x9664;&#x7B2C;&#x4E00;&#x500B;&#x5B57;&#x6BCD;&#x548C;&#x5B50;&#x5B57;&#x4E32;&#x7E7C;&#x7E8C;&#x6BD4; &#x4F8B;&#x5982;&#xFF1A;&#x4E3B;&#x8981;&#x5B57;&#x4E32;&#xFF1A; &#x201C;abcdefghi&#x201D;&#x5B50;&#x5B57;&#x4E32;: &#x201C;abc&#x201D;&#x6AA2;&#x67E5;&#x4E3B;&#x8981;&#x5B57;&#x4E32;&#x524D;&#x4E09;&#x500B;&#x5B57;&#x6BCD;&#xFF08;abc&#xFF09;&#x662F;&#x5426;&#x548C;&#x5B50;&#x5B57;&#x4E32;&#xFF08;abc&#xFF09;&#x4E00;&#x6A23;&#xFF0C;&#x82E5;&#x4E00;&#x6A23;&#x5C31;&#x56DE;&#x50B3;true &#x4E3B;&#x8981;&#x5B57;&#x4E32;&#xFF1A; &#x201C;abcdefghi&#x201D;&#x5B50;&#x5B57;&#x4E32;: &#x201C;defgh&#x201D;&#x6AA2;&#x67E5;&#x4E3B;&#x8981;&#x5B57;&#x4E32;&#x524D;&#x4E94;&#x500B;&#x5B57;&#x6BCD;&#xFF08;abcde&#xFF09;&#x662F;&#x5426;&#x548C;&#x5B50;&#x5B57;&#x4E32;&#xFF08;defgh&#xFF09;&#x4E00;&#x6A23;&#xFF0C;&#x82E5;&#x4E0D;&#x4E00;&#x6A23;&#xFF0C;&#x5247; &#x201C;bcdefghi&#x201D; &#x548C; &#x201C;defgh&#x201D; &#x7E7C;&#x7E8C;&#x6BD4; 1234567891011121314println(isSubString(&quot;I should learn scala seriously!&quot;.toList, &quot;scala&quot;.toList))println(isSubString(&quot;I should learn scala seriously!&quot;.toList, &quot;XXOO&quot;.toList))println(isSubString(&quot;I should learn scala seriously!&quot;.toList, &quot;scaxxyyla&quot;.toList))def isSubString(original: List[Char], target: List[Char]): Boolean = { (original, target) match { case (Nil, _) =&gt; false case (_, Nil) =&gt; true case (o :: Nil, t :: Nil) if (o == t) =&gt; true case (o :: Nil, t :: Nil) if (o != t) =&gt; false case (o, t) if (o.take(t.length) == t) =&gt; true case (oh :: ot, t) =&gt; isSubString(ot, t) }} &#x5C07;&#x4E00;&#x500B;&#x4E32;&#x5217;&#x7531;&#x5C0F;&#x6392;&#x5230;&#x5927;&#x6211;&#x5011;&#x4F86;&#x5BE6;&#x4F5C;Quicksort &#x5F9E;&#x6578;&#x5217;&#x4E2D;&#x6311;&#x51FA;&#x4E00;&#x500B;&#x5143;&#x7D20;&#xFF0C;&#x7A31;&#x70BA; &#x201C;&#x57FA;&#x6E96;&#x201D;&#xFF08;pivot&#xFF09;&#x3002; &#x91CD;&#x65B0;&#x6392;&#x5E8F;&#x6578;&#x5217;&#xFF0C;&#x6240;&#x6709;&#x6BD4;&#x57FA;&#x6E96;&#x503C;&#x5C0F;&#x7684;&#x5143;&#x7D20;&#x64FA;&#x653E;&#x5728;&#x57FA;&#x6E96;&#x524D;&#x9762;&#xFF0C;&#x6240;&#x6709;&#x6BD4;&#x57FA;&#x6E96;&#x503C;&#x5927;&#x7684;&#x5143;&#x7D20;&#x64FA;&#x5728;&#x57FA;&#x6E96;&#x5F8C;&#x9762;&#xFF08;&#x76F8;&#x540C;&#x7684;&#x6578;&#x53EF;&#x4EE5;&#x5230;&#x4EFB;&#x4E00;&#x908A;&#xFF09;&#x3002;&#x5728;&#x9019;&#x500B;&#x5206;&#x5272;&#x7D50;&#x675F;&#x4E4B;&#x5F8C;&#xFF0C;&#x8A72;&#x57FA;&#x6E96;&#x5C31;&#x8655;&#x65BC;&#x6578;&#x5217;&#x7684;&#x4E2D;&#x9593;&#x4F4D;&#x7F6E;&#x3002;&#x9019;&#x500B;&#x7A31;&#x70BA;&#x5206;&#x5272;&#xFF08;partition&#xFF09;&#x64CD;&#x4F5C;&#x3002; &#x905E;&#x8FF4;&#x5730;&#xFF08;recursively&#xFF09;&#x628A;&#x5C0F;&#x65BC;&#x57FA;&#x6E96;&#x503C;&#x5143;&#x7D20;&#x7684;&#x5B50;&#x6578;&#x5217;&#x548C;&#x5927;&#x65BC;&#x57FA;&#x6E96;&#x503C;&#x5143;&#x7D20;&#x7684;&#x5B50;&#x6578;&#x5217;&#x6392;&#x5E8F;&#x3002; 123456789quicksort(List(4, 3, 2, 9, 10))def quicksort(list: List[Int]): List[Int] = { list match { case Nil =&gt; Nil case h :: Nil =&gt; List(h) case h :: t =&gt; quicksort(t.filter(_ &lt;= h)) ::: h :: quicksort(t.filter(_ &gt; h)) }} &#x5BEB;&#x51FA;&#x8CBB;&#x6C0F;&#x6578;&#x5217;&#x4F55;&#x8B02;&#x8CBB;&#x6C0F;&#x6578;&#x5217;&#xFF1A;&#x8CBB;&#x6C0F;&#x6578;&#x5217; 123456789fib(6)def fib(n: Int): Int = { n match { case 0 =&gt; 0 case 1 =&gt; 1 case _ =&gt; fib(n - 1) + fib(n - 2) }} &#x7D93;&#x904E;&#x5E7E;&#x6B21;&#x7684;&#x7DF4;&#x7FD2;&#xFF0C;&#x6211;&#x5011;&#x61C9;&#x8A72;&#x5927;&#x6982;&#x53EF;&#x4EE5;&#x6162;&#x6162;&#x638C;&#x63E1;&#x5230;&#x600E;&#x9EBC;&#x904B;&#x7528;&#x905E;&#x8FF4;&#x4F86;&#x9054;&#x5230;&#x8FF4;&#x5708;&#x76EE;&#x7684;&#x3002; &#x5148;&#x628A;&#x4E3B;&#x8981;&#x908F;&#x8F2F;&#x5BEB;&#x51FA;&#x4F86; &#x518D;&#x628A;&#x908A;&#x754C;&#x689D;&#x4EF6;&#x8A2D;&#x597D;&#xFF0C;&#x6C92;&#x6709;&#x908A;&#x754C;&#x689D;&#x4EF6;&#x5C31;&#x6703;&#x7121;&#x7AAE;&#x7684;&#x8DD1;&#x4E0B;&#x53BB;&#x2026;&#x905E;&#x8FF4;&#x4E3B;&#x8981;&#x662F;&#x900F;&#x904E;&#x81EA;&#x6211;&#x547C;&#x53EB;&#xFF0C;&#x628A;&#x6BCF;&#x4E00;&#x6B65;&#x7684;&#x72C0;&#x614B;&#x653E;&#x5728; stack&#xFF0C;&#x7B49;&#x8D70;&#x5230;&#x908A;&#x754C;&#x56DE;&#x50B3;&#x908A;&#x754C;&#x503C;&#x6216;&#x5B8C;&#x6210;&#x908A;&#x754C;&#x689D;&#x4EF6;&#x5F8C;&#xFF0C;&#x518D;&#x56DE;&#x6EAF;&#x56DE;&#x53BB;&#x3002; &#x628A;&#x554F;&#x984C;&#x900F;&#x904E;Divide and conquer&#x65B9;&#x5F0F;&#xFF0C;&#x5927;&#x554F;&#x984C;&#x5206;&#x89E3;&#x6210;&#x6578;&#x500B;&#x5C0F;&#x554F;&#x984C;&#xFF0C;&#x82E5;&#x5C0F;&#x554F;&#x984C;&#x898F;&#x6A21;&#x8F03;&#x5C0F;&#x4E14;&#x6613;&#x65BC;&#x89E3;&#x6C7A;&#x6642;&#xFF0C;&#x5247;&#x76F4;&#x63A5;&#x89E3;&#x3002;&#x5426;&#x5247;&#xFF0C;&#x905E;&#x6B78;&#x5730;&#x89E3;&#x6C7A;&#x5404;&#x5C0F;&#x554F;&#x984C;&#x3002;&#x6700;&#x5F8C;&#x518D;&#x5C07;&#x6BCF;&#x500B;&#x5C0F;&#x554F;&#x984C;&#x7684;&#x7D50;&#x679C;&#x9010;&#x4E00;&#x5408;&#x4F75;&#x8D77;&#x4F86;&#x3002; &#x905E;&#x8FF4;&#x7684;&#x5BEB;&#x6CD5;&#x5F88;&#x7C21;&#x6F54;&#xFF0C;&#x4F46;&#x662F;&#x6700;&#x5927;&#x7684;&#x554F;&#x984C;&#x662F;&#x6548;&#x80FD;&#x4E0D;&#x597D;&#x548C;&#x5BB9;&#x6613; Stack Overflow&#x3002;&#x4E3B;&#x8981;&#x539F;&#x56E0;&#x662F;&#x6703;&#x53BB;&#x5617;&#x8A66;&#x8D70;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x7684;&#x8DEF;&#x5F91;&#x800C;&#x4E14;&#x628A;&#x6BCF;&#x4E00;&#x500B;&#x72C0;&#x614B;&#x653E;&#x5728;stack&#xFF0C;&#x7576;&#x72C0;&#x614B;&#x4E00;&#x591A;&#x5C31;&#x7206;&#x4E86;&#x3002;&#x53BB;&#x5617;&#x8A66;&#x8D70;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x7684;&#x8DEF;&#x5F91;&#x4E5F;&#x662F;&#x9020;&#x6210;&#x6548;&#x80FD;&#x4E0D;&#x597D;&#x7684;&#x539F;&#x56E0;&#x3002; &#x5047;&#x5982;&#xFF1A; &#x53BB;&#x5617;&#x8A66;&#x8D70;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x7684;&#x8DEF;&#x5F91;&#x4E0D;&#x591A;&#xFF0C;&#x4F46;&#x662F;&#x6BCF;&#x4E00;&#x500B;&#x6B65;&#x8A08;&#x7B97;&#x5F88;&#x82B1;&#x6642;&#x9593;&#xFF0C;&#x905E;&#x8FF4;&#x5BB9;&#x6613;&#x8F49;&#x63DB;&#x6210;&#x975E;&#x540C;&#x6B65;&#x7A0B;&#x5F0F;&#x3002; &#x4EE5;&#x6392;&#x5E8F;&#x70BA;&#x4F8B;&#xFF0C;&#x4E00;&#x500B;&#x4E32;&#x5217;&#x6578;&#x91CF;&#x5C0F;&#x65BC;&#x4E00;&#x5343;&#xFF0C;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;Insertion Sort&#xFF1B;&#x5927;&#x65BC;&#x4E00;&#x5343;&#x6539;&#x4F7F;&#x7528;Quicksort&#xFF1A; 12345678910111213def sort(list: List[Int]): List[Int] = { if(list.length &lt; 1000){ // &#x9700;&#x8981;&#x5927;&#x91CF;&#x6642;&#x9593;&#x8A08;&#x7B97;&#x624D;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;&#x7D50;&#x679C; insertionSort(list) } else{ list match { case Nil =&gt; Nil case h :: Nil =&gt; List(h) case h :: t =&gt; sort(t.filter(_ &lt;= h)) ::: h :: sort(t.filter(_ &gt; h)) } }} &#x6211;&#x5011;&#x53EF;&#x4EE5;&#x8F15;&#x6613;&#x5C07;&#x5B83;&#x8F49;&#x63DB;&#x6210;&#x975E;&#x540C;&#x6B65;&#x7A0B;&#x5F0F;&#x3002;12345678910111213def sort(list: List[Int]): Future[List[Int]] = { if(list.length &lt; 1000){ // &#x9700;&#x8981;&#x5927;&#x91CF;&#x6642;&#x9593;&#x8A08;&#x7B97;&#x624D;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;&#x7D50;&#x679C; Future(insertionSort(list)) } else{ list match { case Nil =&gt; Future(Nil) case h :: Nil =&gt; Future(List(h)) case h :: t =&gt; Future(sort(t.filter(_ &lt;= h)) ::: h :: sort(t.filter(_ &gt; h))) } }} &#x975E;&#x905E;&#x8FF4;&#x7684;&#x7248;&#x672C;&#x5C31;&#x5F88;&#x96E3;&#x6539;&#x4E86;&#xFF0C;&#x56E0;&#x70BA;&#x4E3B;&#x8981;&#x5B58;&#x5728;&#x5171;&#x4EAB;&#x7684;mutable&#x8B8A;&#x6578;&#xFF0C;&#x591A;&#x500B;thread&#x6703;&#x5171;&#x4EAB;&#x540C;&#x4E00;&#x500B;&#x8B8A;&#x6578;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x505A;&#x540C;&#x6B65;&#x8655;&#x7406;&#x3002;&#x540C;&#x6B65;&#x554F;&#x984C;&#x6C92;&#x6709;&#x5C0F;&#x5FC3;&#x8655;&#x7406;&#xFF0C;&#x7D50;&#x679C;&#x5F88;&#x5BB9;&#x6613;&#x51FA;&#x932F;&#x3002; &#x5617;&#x8A66;&#x8D70;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x7684;&#x8DEF;&#x5F91;&#x5F88;&#x591A; &#x4F8B;&#x5982;&#xFF1A;&#x8A08;&#x7B97;&#x7B2C;&#x4E94;&#x5341;&#x500B;&#x8CBB;&#x6C0F;&#x6578;&#x5217;&#x6839;&#x64DA;&#x8A08;&#x7B97;&#x8CBB;&#x6C0F;&#x6578;&#x5217;&#x7684;&#x905E;&#x8FF4;&#x516C;&#x5F0F;&#xFF0C;n = 50 &#x7684;&#x6A39;&#x72C0;&#x7D50;&#x69CB;&#x6703;&#x76F8;&#x7576;&#x5927;&#x3002;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x900F;&#x904E; Tail recursion &#x4F86;&#x89E3;&#x6C7A;&#x3002;&#x628A;&#x4E0A;&#x4E00;&#x500B;&#x72C0;&#x614B;&#x7684;&#x7D50;&#x679C;&#x76F4;&#x63A5;&#x7576;&#x6210;&#x5E36;&#x5165;&#x53C3;&#x6578;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x4F9D;&#x8CF4;&#x4E0A;&#x4E00;&#x500B;&#x72C0;&#x614B;&#x7684;&#x7D50;&#x679C;&#x3002; &#x56E0;&#x70BA; fib(n) = fib(n - 1) + fib(n - 2)&#xFF0C;&#x5047;&#x5982;&#x53EF;&#x4EE5;&#x628A; fib(n - 1) &#x548C; fib(n - 2) &#x7576;&#x53C3;&#x6578;&#x5E36;&#x5165;&#xFF0C;&#x9019;&#x6A23;&#x5C31;&#x53EF;&#x4EE5;&#x99AC;&#x4E0A;&#x5F97;&#x51FA; fib(n)&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x7B49;&#x7B97;&#x5B8C; fib(n - 1) &#x548C; fib(n - 2) &#x5F8C;&#x624D;&#x53EF;&#x4EE5;&#x5F97;&#x51FA; fib(n)&#x3002; import scala.annotation.tailrec fib(0, 1, 5) @tailrec def fib(previous: Int, current: Int, n: Int): Int = { n match { case 0 =&gt; previous case 1 =&gt; current case _ =&gt; fib(current, previous + current, n - 1) } } &#x6709;&#x8208;&#x8DA3;&#x7684;&#x8B80;&#x8005;&#x53EF;&#x4EE5;&#x5230; ScalaKitchen &#x8A66;&#x73A9;&#x770B;&#x770B;&#xFF0C;&#x4E5F;&#x6709;&#x63D0;&#x4F9B;&#x4E2D;&#x6587;&#x7248;&#x672C;&#x7684;Scala&#x5165;&#x9580;&#x6559;&#x5B78;&#x3002;","categories":[{"name":"Scala","slug":"Scala","permalink":"https://pandaforme.github.io/categories/Scala/"}],"tags":[{"name":"Scala","slug":"Scala","permalink":"https://pandaforme.github.io/tags/Scala/"},{"name":"Recursion","slug":"Recursion","permalink":"https://pandaforme.github.io/tags/Recursion/"},{"name":"Tail recursion","slug":"Tail-recursion","permalink":"https://pandaforme.github.io/tags/Tail-recursion/"}]},{"title":"[Scala] Use Either to hand error cases","slug":"Scala-Use-Either-Try-to-hand-error","date":"2017-02-15T08:57:00.000Z","updated":"2017-02-16T04:08:25.000Z","comments":true,"path":"2017/02/15/Scala-Use-Either-Try-to-hand-error/","link":"","permalink":"https://pandaforme.github.io/2017/02/15/Scala-Use-Either-Try-to-hand-error/","excerpt":"","text":"&#x5728;OOP&#x7684;&#x8A9E;&#x8A00;&#x4E2D;&#xFF0C;&#x6211;&#x5011;exception&#x4F86;&#x8868;&#x9054;&#x7A0B;&#x5F0F;&#x932F;&#x8AA4;&#x6216;&#x662F;&#x7CFB;&#x7D71;crash&#xFF0E;Exception&#x53C8;&#x53EF;&#x4EE5;&#x5206;&#x70BA;Checked Exception &#x548C; UnChecked Excpetion&#xFF0E; Checked Exception: &#x6703;&#x5C07;&#x8981;&#x4E1F;&#x51FA;&#x7684;excpetion&#x5BEB;&#x5728;function&#x7684;signature&#xFF0E;&#x4F8B;&#x5982;&#xFF1A; 1interface Foo() throws XXXException, YYYException UnChecked Excpetion: &#x8981;&#x4E1F;&#x51FA;&#x7684;excpetion&#x4E0D;&#x6703;&#x5BEB;&#x5728;function&#x7684;signature&#xFF0C;&#x547C;&#x53EB;function&#x7684;&#x4EBA;&#x9700;&#x8981;&#x77E5;&#x9053;&#x6709;exception&#x8981;&#x8655;&#x7406;&#xFF0E; Checked Exception&#x6703;&#x9055;&#x53CD;Open/Closed Principle&#xFF0C;&#x7576;&#x6709;&#x65B0;&#x589E;&#x4E1F;&#x51FA;&#x7684;excpetion&#xFF0C;&#x9700;&#x8981;&#x4FEE;&#x6539;interface signature&#xFF1B;UnChecked Excpetion&#x5247;&#x662F;&#x9700;&#x8981;&#x77E5;&#x9053;&#x6709;&#x54EA;&#x4E9B;exception&#x9700;&#x8981;&#x8655;&#x7406;&#xFF0E; &#x9019;&#x5169;&#x7A2E;exception&#x5B70;&#x597D;&#x5B70;&#x58DE;&#xFF0C;&#x5728; Clean code: a handbook of agile software craftsmanship, Robert C. Martin &#x6709;&#x63D0;&#x5230;&#xFF1A;123456The debate is over. For years Java programmers have debated over the benefits and liabilities of checked exceptions. When checked exceptions were introduced in the first version of Java, they seemed like a great idea. The signature of every method would list all of the exceptions that it could pass to its caller. Moreover, these exceptions were part of the typeof the method. Your code literally wouldn&apos;t compile if the signature didn&apos;t match what your code could do.At the time, we thought that checked exceptions were a great idea; and yes, they can yield some benefit. However, it is clear now that they aren&apos;t necessary for the production of robust software. C# doesn&apos;t have checked exceptions, and despite valiant attempts, C++ doesn&apos;t either. Neither do Python or Ruby. Yet it is possible to write robust software in all of these languages. Because that is the case, we have to decide&#x2014;really&#x2014;whether checked exceptions are worth their price.Checked exceptions can sometimes be useful if you are writing a critical library: You must catch them. But in general application development the dependency costs outweigh the benefits &#x5728;Java&#x4E2D;&#x5EFA;&#x8B70;&#x4F7F;&#x7528;UnChecked Excpetion&#xFF0C;&#x4F46;&#x662F;&#x9019;&#x6703;&#x5C0E;&#x81F4;&#x53E6;&#x5916;&#x4E00;&#x500B;&#x707D;&#x96E3;&#x2026; &#x547C;&#x53EB;&#x8005;&#x4E0D;&#x77E5;&#x9053;&#x6703;&#x4E1F;&#x51FA;exception &#x547C;&#x53EB;&#x8005;&#x4E0D;&#x77E5;&#x9053;&#x6709;&#x54EA;&#x4E9B;excpetion&#x8981;&#x8655;&#x7406;&#xFF0C;&#x7576;call chain&#x5F88;&#x6DF1;&#x7684;&#x6642;&#x5019;&#x66F4;&#x662F;&#x7CDF;&#x7CD5;&#x2026; &#x5230;&#x8655;&#x5145;&#x6EFF;&#x4E86; try{...} catch{...} &#x76F8;&#x4FE1;&#x4F7F;&#x7528;Java&#x958B;&#x767C;&#x7684;&#x5DE5;&#x7A0B;&#x5E2B;&#x61C9;&#x8A72;&#x611F;&#x89F8;&#x826F;&#x591A;&#xFF0C;&#x5C24;&#x5176;&#x662F;&#x5728;&#x7DAD;&#x8B77;&#x820A;&#x5C08;&#x6848;&#xFF0E;&#x4E00;&#x500B;call chain&#x9577;&#x9054;&#x5341;&#x5E7E;&#x5C64;&#xFF0C;&#x6BCF;&#x4E00;&#x5C64;&#x4E1F;&#x7684;excpetion&#x90FD;&#x4E0D;&#x4E00;&#x6A23;&#xFF0C;&#x6709;&#x4E9B;&#x5C64;&#x6703;&#x8655;&#x7406;exception&#xFF0C;&#x6709;&#x4E9B;&#x53C8;&#x4E0D;&#x6703;&#xFF0C;&#x6700;&#x5F8C;&#x7684;&#x5927;&#x7D55;&#x62DB;&#x5C31;&#x662F;&#x6BCF;&#x4E00;&#x5C64;&#x90FD;&#x52A0; try{...} catch{...}&#xFF0E; &#x4F8B;&#x5916;&#x8655;&#x7406;&#x5728;OOP&#x662F;&#x4E00;&#x500B;&#x5F88;&#x91CD;&#x8981;&#x7684;&#x8B70;&#x984C;&#xFF0C;&#x6C92;&#x6709;&#x8B39;&#x614E;&#x8655;&#x7406;&#x5F88;&#x5BB9;&#x6613;&#x9020;&#x6210;&#x7DAD;&#x8B77;&#x56F0;&#x96E3;&#x548C;&#x767C;&#x751F;&#x554F;&#x984C;&#x4E0D;&#x5BB9;&#x6613;&#x627E;&#x5230;&#x554F;&#x984C;&#x9EDE;&#xFF0E;&#x56E0;&#x70BA;Exception&#x662F;&#x6709;side effect&#xFF0C;&#x5728;FP&#x662F;&#x4E0D;&#x88AB;&#x51C6;&#x8A31;&#x7684;&#xFF0E;&#x6240;&#x4EE5;&#x5728;pure FP&#x7A0B;&#x5F0F;&#x4E2D;&#x662F;&#x770B;&#x4E0D;&#x5230;excpetion&#x548C; try{...} catch{...}&#xFF0E; Either&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x900F;&#x904E; Either &#x4F86;&#x9054;&#x6210;&#xFF0C;Left &#x653E;&#x932F;&#x8AA4;&#x7684;&#x7269;&#x4EF6;&#xFF0C;Right &#x653E;&#x6B63;&#x78BA;&#x7684;&#x7269;&#x4EF6;&#xFF1A;123456789sealed abstract class Either[A, B]final case class Left[+A, +B](a: A) extends Either[A, B]final case class Right[+A, +B](b: B) extends Either[A, B]// for exmpletype Error = Stringval result = Right[Error, Int](123)val error = Left[Error, Int](&quot;Something wrong!!!&quot;) &#x6211;&#x5011;&#x53EF;&#x4EE5;&#x628A;&#x6B63;&#x78BA;&#x7684;&#x7D50;&#x679C;&#x6216;&#x932F;&#x8AA4;&#x653E;&#x5230; Either &#x9019;&#x500B;&#x5BB9;&#x5668;&#xFF0C;&#x547C;&#x53EB;&#x8005;&#x53EF;&#x4EE5;&#x6E05;&#x695A;&#x77E5;&#x9053;&#x6709;&#x9700;&#x8981;&#x8655;&#x7406;&#x932F;&#x8AA4;&#x60C5;&#x6CC1;&#xFF0C;&#x518D;&#x4F86;&#x7A0B;&#x5F0F;&#x78BC;&#x4E0D;&#x518D;&#x5230;&#x8655;&#x5145;&#x65A5; try{...} catch{...}&#xFF0E; &#x6211;&#x5011;&#x4F7F;&#x7528;&#x56DB;&#x5247;&#x904B;&#x7B97;&#x4F86;&#x7576;&#x7BC4;&#x4F8B;&#xFF0C;&#x5982;&#x4F55;&#x4F7F;&#x7528; Either123456789101112131415161718192021222324252627282930313233343536373839404142def div(a: Double, b: Double): Either[String, Double] = { if(b == 0) Left[String, Double](&quot;Can&apos;t divide by 0 !!!&quot;) else Right[String, Double](a / b)}def add(a: Double, b: Double): Either[String, Double] = { Right[String, Double](a + b)}def minus(a: Double, b: Double): Either[String, Double] = { Right[String, Double](a - b)}def mul(a: Double, b: Double): Either[String, Double] = { Right[String, Double](a * b)}// ((((1 + 2) * 3) / 4) - 5)val result = for { r1 &lt;- add(1, 2) r2 &lt;- mul(r1, 3) r3 &lt;- div(r2, 4) r4 &lt;- minus(r3, 5)} yield { r4}// result: scala.util.Either[String,Double] = Right(-2.75)// ((((1 + 2) * 3) / 0) - 5)val result = for { r1 &lt;- add(1, 2) r2 &lt;- mul(r1, 3) r3 &lt;- div(r2, 0) r4 &lt;- minus(r3, 5)} yield { r4}// result: scala.util.Either[String,Double] = Left(Can&apos;t divide by 0 !!!) &#x6839;&#x64DA;&#x4E0A;&#x9762;&#x7C21;&#x55AE;&#x7684;&#x7BC4;&#x4F8B;&#xFF0C;&#x9019;&#x6A23;&#x7684;&#x5BEB;&#x6CD5;&#x5F88;&#x660E;&#x986F;&#x512A;&#x65BC;&#x50B3;&#x7D71;OOP&#x7528;excpetion&#x4F86;&#x8655;&#x7406;&#x932F;&#x8AA4;&#xFF1A; &#x4E0D;&#x518D;&#x6709; try{...} catch{...} &#x5145;&#x65A5;&#x5728;&#x6BCF;&#x500B;&#x5730;&#x65B9;&#xFF0E; &#x547C;&#x53EB;&#x8005;&#x53EF;&#x4EE5;&#x6839;&#x64DA;fucntion signature&#x77E5;&#x9053;&#x662F;&#x5426;&#x6703;&#x7522;&#x751F;&#x932F;&#x8AA4;&#xFF0E; &#x66F4;&#x53EF;&#x4EE5;&#x5C08;&#x5FC3;&#x5728;&#x5546;&#x696D;&#x908F;&#x8F2F;&#xFF0C;&#x800C;&#x4E0D;&#x7528;&#x82B1;&#x591A;&#x9918;&#x7684;&#x5FC3;&#x529B;&#x5728;&#x8655;&#x7406;&#x4F8B;&#x5916;&#xFF0E; Try12345sealed abstract class Try[+T]final case class Failure[+T](exception: Throwable) extends Try[T] final case class Success[+T](value: T) extends Try[T] Try &#x4E5F;&#x662F;&#x985E;&#x4F3C;&#x65BC; Either &#x7684;context&#xFF0C;&#x6709;&#x8208;&#x8DA3;&#x7684;&#x8B80;&#x8005;&#x53EF;&#x4EE5;&#x8A66;&#x7528;&#x770B;&#x770B;&#xFF0E;&#x5728;&#x5BE6;&#x52D9;&#x4E0A;&#x5927;&#x90E8;&#x5206;&#x90FD;&#x63A1;&#x7528; Either&#xFF0C;&#x4E0D;&#x63A1;&#x7528; Try&#x7684;&#x539F;&#x56E0;&#x662F;&#xFF1A; &#x6C92;&#x6709;&#x8FA6;&#x6CD5;&#x5C0D;exception&#x505A; exhaustive pattern match&#xFF0C;&#x7576;&#x662F;Failure&#x7684;&#x6642;&#x5019;&#xFF0C;&#x547C;&#x53EB;&#x8005;&#x4E0D;&#x77E5;&#x9053;&#x6709;&#x54EA;&#x4E9B;exception&#x6703;&#x4E1F;&#x51FA;&#xFF0C;&#x53EA;&#x77E5;&#x9053;&#x6703;&#x4E1F;&#x51FA;&#x4E00;&#x500B; Throwable class&#xFF0E; &#x4F7F;&#x7528; Either &#x6211;&#x5011;&#x53EF;&#x4EE5;&#x81EA;&#x8A02;Error type&#xFF0C;&#x7576;&#x5931;&#x6557;&#x6642;&#x5019;&#x5C31;&#x53EF;&#x4EE5;&#x5C0D;Error type&#x505A; exhaustive pattern match&#xFF0C;&#x4F9D;&#x64DA;&#x4E0D;&#x540C;&#x7684;&#x932F;&#x8AA4;&#x505A;&#x4E0D;&#x540C;&#x7684;&#x8655;&#x7406;&#xFF0E;","categories":[{"name":"Scala","slug":"Scala","permalink":"https://pandaforme.github.io/categories/Scala/"}],"tags":[{"name":"Scala","slug":"Scala","permalink":"https://pandaforme.github.io/tags/Scala/"},{"name":"Exception","slug":"Exception","permalink":"https://pandaforme.github.io/tags/Exception/"},{"name":"Either","slug":"Either","permalink":"https://pandaforme.github.io/tags/Either/"},{"name":"Try","slug":"Try","permalink":"https://pandaforme.github.io/tags/Try/"}]},{"title":"[Scala] How to use Option correctly","slug":"Scala-How-to-use-Option-correctly","date":"2016-12-20T07:13:00.000Z","updated":"2017-05-18T08:05:16.000Z","comments":true,"path":"2016/12/20/Scala-How-to-use-Option-correctly/","link":"","permalink":"https://pandaforme.github.io/2016/12/20/Scala-How-to-use-Option-correctly/","excerpt":"","text":"&#x5C0D;&#x65BC;Scala&#x6211;&#x4E00;&#x76F4;&#x628A;&#x5B83;&#x7576;&#x6210;&#x9032;&#x968E;&#x7248;&#x672C;&#x7684;Java&#xFF0C;&#x7576;&#x8D8A;&#x4F86;&#x8D8A;&#x4E86;&#x89E3;Functional Programming&#x7684;&#x7CBE;&#x795E;&#xFF0C;&#x624D;&#x767C;&#x73FE;&#x4E4B;&#x524D;&#x60F3;&#x6CD5;&#x9084;&#x883B;&#x5929;&#x771F;&#x7684;&#xFF0E; &#x53EF;&#x4EE5;&#x5F9E;&#x5982;&#x4F55;&#x6B63;&#x78BA;&#x4F7F;&#x7528; Option &#xFF0C;&#x8B93;&#x6211;&#x5011;&#x6162;&#x6162;&#x4F86;&#x9032;&#x5165;Functional Programming&#x7684;&#x4E16;&#x754C;&#xFF0E; &#x5148;&#x5F9E;&#x4E00;&#x500B;&#x7C21;&#x55AE;&#x7684;API&#x5BE6;&#x4F8B;&#x4F86;&#x958B;&#x59CB;&#xFF1A; &#x5047;&#x5982;&#x6709;&#x4E00;&#x500B;API&#xFF0C;Admin&#x4F7F;&#x7528;&#x8005;&#x53EF;&#x4EE5;&#x627E;&#x51FA;&#x67D0;&#x500B;&#x570B;&#x5BB6;&#x7684;&#x6240;&#x6709;&#x4F7F;&#x7528;&#x8005;&#xFF1B;&#x4E0D;&#x662F;Admin&#x4F7F;&#x7528;&#x8005;&#x5C31;&#x56DE;&#x50B3;&#x7A7A;&#x5B57;&#x4E32;&#xFF0E; &#x4F7F;&#x7528;&#x8005;&#x6703;&#x5E36;&#x4E0A; userName , password &#x548C; country &#x547C;&#x53EB;&#x6B64;API&#xFF0C;&#x9019;&#x500B;API&#x6703; &#x6AA2;&#x67E5;&#x683C;&#x5F0F;&#x662F;&#x5426;&#x6B63;&#x78BA; &#x67E5;&#x8A62;&#x8CC7;&#x6599;&#x5EAB;&#x662F;&#x5426;&#x6709;&#x4F7F;&#x7528;&#x8005; &#x82E5;&#x6709;&#xFF0C;&#x6AA2;&#x67E5; userType &#x4F7F;&#x5426;&#x70BA; Admin &#x6839;&#x64DA; country &#x53BB;&#x8CC7;&#x6599;&#x5EAB;&#x6488;&#x53D6;&#x8A72;&#x570B;&#x5BB6;&#x7684;&#x6240;&#x6709;&#x4F7F;&#x7528;&#x8005; &#x5C07;&#x7D50;&#x679C;&#x8F49;&#x6210; json &#x653E;&#x5230; http response &#x5148;&#x5B9A;&#x7FA9; Data Type&#xFF1A;123456789101112131415161718192021sealed trait Namefinal case class UserName(name: String) extends Namesealed trait Passwordfinal case class MD5Password(plainText: String) extends Passwordsealed trait Countryfinal case object TAIWAN extends Countryfinal case object CHINA extends Countrysealed trait UserTypefinal case object ADMIN extends UserTypefinal case object EMAIL extends UserTypefinal case object PHONE extends UserTypesealed trait Account { val name: String}final case class AccountWithCredential(name: UserName, password: Password, userType: UserType) extends Accountfinal case class AccountWithProfile(name: UserName, country: Country, age: Int) extends Account &#x9019;&#x6A23;&#x7684; Data Type &#x4E5F;&#x662F;&#x6240;&#x8B02;&#x7684; Algebraic Type&#xFF0C;&#x4EE5; Account &#x70BA;&#x4F8B;&#xFF1A; &#x5B83;&#x6709;&#x5169;&#x7A2E; subtype AccountWithCredential &#x548C; AccountWithProfile&#xFF0C;&#x70BA; Account &#x7684; Sum Type &#x5404;&#x7A2E;&#x4E0D;&#x540C; subtype &#x6709;&#x5B83;&#x5011;&#x7684;&#x53C3;&#x6578;&#xFF0C;&#x4E5F;&#x7A31;&#x4E4B; Product Type &#x9019;&#x7A2E;&#x5B9A;&#x7FA9;&#x65B9;&#x5F0F;&#x6709;&#x9EDE;&#x50CF;Java&#x4E16;&#x754C;&#x4E2D;&#x7684; Value Object&#xFF0C;&#x628A;&#x8CC7;&#x6599;&#x548C;&#x884C;&#x70BA;&#x5206;&#x958B;&#x662F;&#x6709;&#x597D;&#x8655;&#x7684;&#xFF0C;&#x907F;&#x514D;&#x8CC7;&#x6599;&#x548C;&#x884C;&#x70BA;&#x8026;&#x5408;&#x904E;&#x7DCA;&#xFF0E;Design Pattern &#x4E5F;&#x662F;&#x900F;&#x904E;pattern&#x53BB;&#x5206;&#x96E2;&#x8CC7;&#x6599;&#x548C;&#x884C;&#x70BA;&#xFF0E; &#x518D;&#x4F86;&#x6211;&#x5011;&#x4F86;&#x5B9A;&#x7FA9;&#x884C;&#x70BA;&#xFF1A;1234567891011trait Repo { def login(name: UserName, password: Password): Option[AccountWithCredential] def getAccountsByCountry(country: Country): Option[List[AccountWithProfile]]}object Repo extends Repo { def login(name: UserName, password: Password): Option[AccountWithCredential] = ??? def getAccountsByCountry(country: Country): Option[List[AccountWithProfile]] = ???} login &#x7684;&#x56DE;&#x50B3;&#x503C;&#x70BA;&#x4E00;&#x500B; Option context&#xFF0C;&#x88E1;&#x9762;&#x88DD;&#x8457; AccountWithCredential&#xFF0E; &#x82E5;&#x6709;&#x627E;&#x5230;&#x5C31;&#x56DE;&#x50B3; Some[AccountWithCredential] &#x82E5;&#x6C92;&#x6709;&#x627E;&#x5C31;&#x56DE;&#x50B3; None &#x5728; Java 7 &#x4E4B;&#x524D;&#x7684;&#x7248;&#x672C;&#x6703;&#x5B9A;&#x7FA9;&#x627E;&#x4E0D;&#x5230;&#x6703;&#x56DE;&#x50B3; Null&#xFF0C;Null &#x6703;&#x9020;&#x6210;&#x8A9E;&#x610F;&#x4E0D;&#x6E05;&#x548C;&#x7A0B;&#x5F0F;&#x78BC;&#x5145;&#x65A5;&#x8457;&#x4E00;&#x5806;&#x6AA2;&#x67E5;&#x662F;&#x5426;&#x70BA; Null &#x7684;&#x7A0B;&#x5F0F;&#x78BC;&#xFF0E;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x900F;&#x904E; Null Object pattern &#x4F86;&#x89E3;&#x6C7A;&#x9019;&#x500B;&#x554F;&#x984C;&#xFF0E;&#x5728; Scala &#x6216; Java 8 &#x5247;&#x662F;&#x900F;&#x904E; Option / Optional data type&#x4F86;&#x89E3;&#x6C7A;&#x4E4B;&#xFF0E; &#x6211;&#x5011;&#x53EF;&#x4EE5;&#x5BE6;&#x4F5C;API&#xFF1A;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748object Api extends App { val name: Option[UserName] = parse(UserName(args(0))) val password: Option[MD5Password] = parse(MD5Password(args(1))) // Step1: login // Step2: check isAdmin == true // Step3: get accounts by country // Step4: convert accounts to json // Step5: add json to HttpResponse if (name.isEmpty) throw new RuntimeException(&quot;bad id&quot;) if (password.isEmpty) throw new RuntimeException(&quot;bad password&quot;) val json: Option[String] = getJsonProfile(name.get, password.get, CHINA) if (json.isDefined) { returnHttpResponse(json.get) } else { returnHttpResponse(&quot;&quot;) } private def parse[A](a: =&gt; A): Option[A] = ??? private def getJsonProfile(name: UserName, password: Password, country: Country): Option[String] = { val accountWithCredential: Option[AccountWithCredential] = Repo.login(name, password) if (accountWithCredential.isDefined) { accountWithCredential.get.userType match { case ADMIN =&gt; val accounts: Option[List[AccountWithProfile]] = Repo.getAccountsByCountry(country) if (accounts.isDefined) { listToJson(accounts.get) } else { None } case _: UserType =&gt; None } } else { None } } // convert a list of Account to json String private def listToJson[A](list: List[A]): Option[String] = ??? private def returnHttpResponse(message: String): Unit = ???} &#x9019;&#x500B;&#x7248;&#x672C;&#x5229;&#x7528; isDefined &#x53BB;&#x5224;&#x5B9A;&#x662F;&#x5426;&#x70BA;&#x7A7A;&#x503C;&#xFF0C;&#x9019;&#x6A23;&#x7684;&#x5BEB;&#x6CD5;&#x8DDF;&#x4F7F;&#x7528; Null &#x7576;&#x56DE;&#x50B3;&#x503C;&#x4E00;&#x6A23;&#xFF0C;&#x5728;&#x9019;&#x500B;&#x7248;&#x672C;&#x5B8C;&#x5168;&#x770B;&#x4E0D;&#x51FA;&#x4F7F;&#x7528; Option &#x597D;&#x8655;&#xFF0C;&#x53CD;&#x800C;&#x986F;&#x5F97;&#x5197;&#x9918;&#xFF0E; &#x6211;&#x5011;&#x6539;&#x5BEB;&#x53E6;&#x5916;&#x4E00;&#x500B;&#x7248;&#x672C; getJsonProfile &#xFF1A;123456789private def getJsonProfile(name: UserName, password: Password, country: Country): Option[String] = { Repo.login(name, password).flatMap( account =&gt; { if (account.userType == ADMIN) { Repo.getAccountsByCountry(country).flatMap(profiles =&gt; listToJson(profiles)) } else None }) } &#x6211;&#x5011;&#x5229;&#x7528; flatMap &#x4F86;&#x5E6B;&#x4E32;&#x63A5;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5617;&#x8A66;&#x53D6;&#x5F97; Option &#x88E1;&#x9762;&#x7684;&#x503C;&#xFF0C;Option &#x7684; flatMap &#x7684; signature &#x70BA; A =&gt; Option[B]&#xFF0E; &#x4F8B;&#x5982;&#xFF1A; getAccountsByCountry &#x9700;&#x4F9D;&#x8CF4; login &#x7684;&#x7D50;&#x679C;&#xFF0C;&#x624D;&#x53EF;&#x4EE5;&#x9032;&#x884C;&#x4E4B;&#x5F8C;&#x7684;&#x52D5;&#x4F5C;&#xFF0E;&#x6211;&#x5011;&#x662F;&#x900F;&#x904E; flatMap &#x5C07;&#x9019;&#x5169;&#x500B;&#x52D5;&#x4F5C;&#x4E32;&#x63A5;&#x8D77;&#x4F86;&#xFF0C;&#x9019;&#x6A23;&#x5C31;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x4E00;&#x5806;&#x5197;&#x9918; if else &#x6AA2;&#x67E5;&#xFF0E; &#x518D;&#x8209;&#x4E00;&#x500B;&#x62BD;&#x8C61;&#x7684;&#x4F8B;&#x5B50;&#xFF1A;1234567def A(a: A): Option[B] = ???def B(b: B): Option[C] = ???def C(c: C): Option[D] = ???def total(input: Option[A]): Option[D] = { input.flatMap(A(_).flatMap(B(_).flatMap(C(_))))} &#x53EF;&#x4EE5;&#x900F;&#x904E; flatMap &#x4E32;&#x63A5; A, B, C &#x9019;&#x4E09;&#x500B;function&#xFF0C;&#x5047;&#x5982;&#x7528; isDefined &#x4F86;&#x4E32;&#x63A5;&#xFF0C;&#x7A0B;&#x5F0F;&#x78BC;&#x7684;&#x53EF;&#x8B80;&#x6027;&#x548C;&#x7DAD;&#x8B77;&#x6027;&#x6703;&#x5927;&#x5E45;&#x4E0B;&#x964D;&#xFF0E;&#x5728; Function Programming&#x4E2D;&#xFF0C;&#x5E38;&#x898B;&#x7684;pattern&#x6703;&#x5C07;&#x503C;&#x653E;&#x5230;&#x4E00;&#x500B;context&#x88E1;&#x9762;&#xFF0C;&#x5728;&#x4F7F;&#x7528;&#x6642;&#x5019;&#x4E26;&#x4E0D;&#x6703;&#x5C07;&#x503C;&#x53D6;&#x51FA;&#x4F86;&#xFF0C;&#x800C;&#x662F;&#x900F;&#x904E; flatMap &#x6216; map &#x4F86;&#x8F49;&#x63DB;context&#x88E1;&#x9762;&#x7684;&#x503C;&#xFF0E; &#x6211;&#x5011;&#x53EF;&#x4EE5;&#x50B3;&#x5165; parse &#x904E;&#x5F8C;&#x7684;&#x7D50;&#x679C;&#xFF0C;&#x5C07;&#x6240;&#x6709;&#x7684;function&#x4E32;&#x63A5;&#x5728;&#x4E00;&#x8D77;&#xFF1A;12345678910111213141516171819202122232425262728object Api extends App { val name: Option[UserName] = parse(UserName(args(0))) val password: Option[MD5Password] = parse(MD5Password(args(1))) val json: Option[String] = getJsonProfile(name, password, CHINA) if (json.isDefined) { returnHttpResponse(json.get) } else { returnHttpResponse(&quot;&quot;) } private def getJsonProfile(name: Option[UserName], password: Option[Password], country: Country): Option[String] = { name.flatMap(name1 =&gt; password.flatMap(password1 =&gt; Repo.login(name1, password1).flatMap( account =&gt; { if (account.userType == ADMIN) { Repo.getAccountsByCountry(country).flatMap(profiles =&gt; listToJson(profiles)) } else None }) )) } // other functions // ...} &#x53EF;&#x4EE5;&#x767C;&#x73FE;&#x4E32;&#x63A5;&#x7684;function&#x8D8A;&#x591A;&#xFF0C;&#x6703;&#x8D8A;&#x5BEB;&#x8D8A;&#x53F3;&#x908A;&#xFF0C;&#x6709;&#x9EDE;&#x985E;&#x4F3C; Callback hell &#xFF0C;&#x6216;&#x8A31;&#x4E5F;&#x53EF;&#x4EE5;&#x7A31;&#x70BA; flatMap hell&#x2026;&#x597D;&#x96AA;Scala&#x6709;&#x63D0;&#x4F9B;&#x5F88;&#x597D;&#x7684; syntax sugar for comprehension &#x4F86;&#x89E3;&#x6C7A; flatMap hell 1234567891011121314151617object Api extends App { val name: Option[UserName] = parse(UserName(args(0))) val password: Option[MD5Password] = parse(MD5Password(args(1))) for { name1 &lt;- name password1 &lt;- password account &lt;- Repo.login(name1, password1).filter(a =&gt; a.userType == ADMIN) profiles &lt;- Repo.getAccountsByCountry(CHINA) json &lt;- listToJson(profiles) } yield { returnHttpResponse(json) } // other functions // ...} &#x6BD4;&#x8F03;&#x7B2C;&#x4E00;&#x500B;&#x7248;&#x672C;&#x548C;&#x6700;&#x5F8C;&#x4E00;&#x500B;&#x7248;&#x672C;&#x7684;&#x7A0B;&#x5F0F;&#x78BC;&#xFF0C;&#x6700;&#x5F8C;&#x4E00;&#x500B;&#x7248;&#x672C;&#x53EF;&#x4EE5;&#x5F88;&#x6E05;&#x695A;&#x8868;&#x9054;&#x6574;&#x500B;&#x7A0B;&#x5F0F;&#x610F;&#x5716;&#xFF0C;&#x800C;&#x4E0D;&#x6703;&#x88AB;&#x4E00;&#x5806; if else &#x6AA2;&#x67E5;&#x800C;&#x5E72;&#x64FE;&#xFF0E;&#x900F;&#x904E;&#x6B63;&#x78BA;&#x4F7F;&#x7528; Option &#x6211;&#x5011;&#x53EF;&#x4EE5;&#x5B78;&#x7FD2;&#x5230;&#xFF1A; &#x5206;&#x96E2;&#x8CC7;&#x6599;&#x548C;&#x884C;&#x70BA; &#x5C07;&#x8CC7;&#x6599;&#x653E;&#x5165;context &#x5229;&#x7528; flatMap, map &#x8F49;&#x63DB;context&#x88E1;&#x9762;&#x7684;&#x503C; &#x884D;&#x751F;&#x9700;&#x6C42;&#x6700;&#x5F8C;&#x4E00;&#x500B;&#x7248;&#x672C;&#x53EF;&#x4EE5;&#x767C;&#x73FE;payload&#x4E0D;&#x6B63;&#x78BA;&#x6216;&#x67D0;&#x500B;&#x570B;&#x5BB6;&#x7684;&#x4F7F;&#x7528;&#x8005;&#x70BA;&#x96F6; &#x7D50;&#x679C;&#x7ADF;&#x7136;&#x90FD;&#x662F;None&#xFF0C;&#x9019;&#x6A23;&#x6703;&#x9020;&#x6210;&#x4F7F;&#x7528;&#x8005;&#x9AD4;&#x9A57;&#x4E0D;&#x4F73;&#x548C;&#x7DAD;&#x8B77;&#x4E0A;&#x7684;&#x56F0;&#x96E3;&#xFF0E;&#x90A3;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x600E;&#x9EBC;&#x6539;&#x5584;&#x5462;&#xFF1F; &#x53EF;&#x4EE5;&#x6539;&#x7528; Try &#x6216; Either &#x4F86;&#x8868;&#x9054;&#x932F;&#x8AA4;&#xFF0C;&#x5728;&#x9019;&#x908A;&#x4F7F;&#x7528; Option &#x4F86;&#x8868;&#x793A;parse&#x5B8C;&#x7684;&#x7D50;&#x679C;&#x4E0D;&#x592A;&#x6D3D;&#x7576;&#xFF0C;&#x4E3B;&#x8981;&#x662F;&#x5C55;&#x793A;&#x53EF;&#x4EE5;&#x900F;&#x904E;compse&#x65B9;&#x5F0F;&#x4F86;&#x4E32;&#x63A5;&#x591A;&#x500B;function&#xFF0C;&#x4E0B;&#x4E00;&#x7BC7;&#x5C07;&#x6539;&#x7528; Try &#x6216; Either &#xFF0C;&#x8B93;&#x524D;&#x7AEF;&#x53EF;&#x4EE5;&#x6E05;&#x695A;&#x77E5;&#x9053;&#x932F;&#x8AA4;&#x8A0A;&#x606F;&#xFF0E; &#x53C3;&#x8003;&#xFF1A; Introduction to Algebraic Types in Scala","categories":[{"name":"Scala","slug":"Scala","permalink":"https://pandaforme.github.io/categories/Scala/"}],"tags":[{"name":"Scala","slug":"Scala","permalink":"https://pandaforme.github.io/tags/Scala/"},{"name":"Option","slug":"Option","permalink":"https://pandaforme.github.io/tags/Option/"}]},{"title":"[Java] Java is Pass by Value and Not Pass by Reference","slug":"Java-Java-is-Pass-by-Value-and-Not-Pass-by-Reference","date":"2016-12-09T11:00:43.000Z","updated":"2016-12-13T07:25:36.000Z","comments":true,"path":"2016/12/09/Java-Java-is-Pass-by-Value-and-Not-Pass-by-Reference/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-Java-is-Pass-by-Value-and-Not-Pass-by-Reference/","excerpt":"","text":"Java&#x5230;&#x5E95;&#x662F;pass by value&#x9084;&#x662F;pass by reference&#xFF1F;&#x8AAA;&#x6CD5;&#x773E;&#x8AAA;&#x7D1B;&#x7D1C;&#xFF0C;&#x5F8C;&#x4F86;&#x770B;&#x5230;&#x9019;&#x7BC7;&#x6587;&#x7AE0;Java is Pass by Value and Not Pass by Reference&#x5F8C;&#xFF0C;&#x89C0;&#x5FF5;&#x624D;&#x6574;&#x500B;&#x91D0;&#x6E05;&#x3002; Java&#x662F;pass by value! &#x7BC4;&#x4F8B;&#xFF1A;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class Balloon { private String color; public Balloon() { } public Balloon(String c) { this.color = c; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } public static void main(String[] args) { Balloon red = new Balloon(&quot;Red&quot;); Balloon blue = new Balloon(&quot;Blue&quot;); swap(red, blue); System.out.println(&quot;red color=&quot; + red.getColor()); System.out.println(&quot;blue color=&quot; + blue.getColor()); foo(blue); System.out.println(&quot;blue color=&quot; + blue.getColor()); } private static void foo(Balloon balloon) { balloon.setColor(&quot;Red&quot;); balloon = new Balloon(&quot;Green&quot;); balloon.setColor(&quot;Blue&quot;); } public static void swap(Object o1, Object o2) { Object temp = o1; o1 = o2; o2 = temp; } public static void swap1(Balloon o1, Balloon o2) { String temp = o1.getColor(); o1.setColor(o2.getColor()); o2.setColor(temp); }} &#x7D50;&#x679C;&#xFF1A;123456789//&#x4F7F;&#x7528;swap()red color=Redblue color=Blueblue color=Red//&#x4F7F;&#x7528;swap1()red color=Blueblue color=Redblue color=Red &#x5206;&#x6790;&#xFF1A; &#x5C1A;&#x672A;&#x57F7;&#x884C;swap()&#xFF1A; &#x57F7;&#x884C;swap()&#xFF0C;o1&#x6307;&#x5411;red&#xFF0C;o2&#x6307;&#x5411;blue&#xFF1A; swap()&#x57F7;&#x884C;&#x7D50;&#x675F;&#xFF0C;&#x539F;&#x672C;&#x7684;&#x7269;&#x4EF6;&#x4E26;&#x6C92;&#x6709;&#x4E92;&#x76F8;&#x4EA4;&#x63DB;&#xFF1A; &#x57F7;&#x884C;foo()&#xFF0C;ballon&#x6307;&#x5411;blue&#xFF1A; &#x57F7;&#x884C;foo()&#x7B2C;&#x4E00;&#x884C;&#xFF0C;&#x900F;&#x904E;&#x539F;&#x672C;&#x7269;&#x4EF6;&#x7684;setter method&#x4FEE;&#x6539;&#x503C;&#xFF1A; &#x57F7;&#x884C;foo()&#x7B2C;&#x4E8C;&#x884C;&#xFF1A; &#x57F7;&#x884C;foo()&#x7B2C;&#x4E09;&#x884C;&#xFF1A; &#x56E0;&#x70BA;Java&#x662F;&#x63A1;&#x7528;pass by value&#x4F5C;&#x6CD5;&#xFF0C;&#x7576;&#x4EE5;&#x7269;&#x4EF6;&#x4F5C;&#x70BA;&#x53C3;&#x6578;&#x50B3;&#x5165;&#x5230;method&#xFF0C;&#x5728;method&#x88E1;&#x9762;&#x60F3;&#x8981;&#x4FEE;&#x6539;&#x7269;&#x4EF6;&#x7684;&#x503C;&#xFF0C;&#x9700;&#x900F;&#x904E;&#x7269;&#x4EF6;&#x7684;setter method&#xFF0C;&#x9019;&#x6A23;&#x539F;&#x672C;&#x7269;&#x4EF6;&#x7684;&#x503C;&#x624D;&#x6703;&#x9023;&#x5E36;&#x4E00;&#x8D77;&#x8B8A;&#x66F4;&#x3002;&#x900F;&#x904E;assign(=)&#x6216;new&#x7B49;&#x65B9;&#x5F0F;&#xFF0C;&#x539F;&#x672C;&#x7269;&#x4EF6;&#x7684;&#x503C;&#x90FD;&#x4E0D;&#x6703;&#x6709;&#x8B8A;&#x5316;&#x3002; &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; Java is Pass by Value and Not Pass by Reference","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[Java]  Java String Pool","slug":"Java-Java-String-Pool","date":"2016-12-09T10:57:57.000Z","updated":"2016-12-13T07:25:39.000Z","comments":true,"path":"2016/12/09/Java-Java-String-Pool/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-Java-String-Pool/","excerpt":"","text":"&#x5047;&#x5982;&#x6C92;&#x6709;string pool&#x9019;&#x6A23;&#x7684;&#x6A5F;&#x5236;&#xFF0C;&#x9047;&#x5230;string&#x5C31;&#x5EFA;&#x7ACB;&#x4E00;&#x500B;&#x7269;&#x4EF6;&#xFF0C;&#x9019;&#x6A23;&#x8A18;&#x61B6;&#x9AD4;&#x5C31;&#x5F88;&#x5FEB;&#x5C31;&#x6703;&#x7206;&#x6389;&#x4E86;&#x3002; &#x5728;java&#x4E2D;&#x63A1;&#x53D6;Flyweight pattern&#x4F5C;&#x6CD5;&#xFF0C;&#x53EF;&#x4EE5;&#x5171;&#x4EAB;&#x540C;&#x6A23;&#x7684;string object&#x3002; &#x5EFA;&#x7ACB;string object&#x6709;&#x5169;&#x7A2E;&#x65B9;&#x5F0F;&#xFF1A; String string = &#x201C;Cat&#x201D;; String string = new String(&#x201C;Cat&#x201D;); &#x63A1;&#x7528;&#x7B2C;&#x4E00;&#x7A2E;&#x65B9;&#x6CD5;&#xFF0C;&#x6703;&#x5148;&#x6AA2;&#x67E5;string pool&#x662F;&#x5426;&#x6709;&#x76F8;&#x540C;&#x7684;string&#x3002;&#x82E5;&#x6709;&#x5C31;&#x5171;&#x7528;&#xFF0C;&#x6C92;&#x6709;&#x5247;&#x5EFA;&#x7ACB;&#x4E4B;&#x3002; &#x63A1;&#x7528;&#x7B2C;&#x4E8C;&#x7A2E;&#x65B9;&#x6CD5;&#xFE50;&#x4E0D;&#x6703;&#x4F7F;&#x7528;&#x5230;string pool&#x6A5F;&#x5236;&#xFF0C;&#x800C;&#x662F;&#x5728;heap&#x5EFA;&#x7ACB;&#x4E00;&#x500B;&#x65B0;&#x7684;string object&#x3002;&#x82E5;&#x4E4B;&#x5F8C;&#x60F3;&#x8981;&#x4F7F;&#x7528;string pool&#x6A5F;&#x5236;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;intern&#x3002; &#x7BC4;&#x4F8B;&#xFF1A;12345678910111213public class StringExample { public static void main(String args[]) { String s1 = &quot;Cat&quot;; String s2 = &quot;Cat&quot;; String s3 = new String(&quot;Cat&quot;); System.out.println(&quot;s1 == s2 ?&quot; + (s1 == s2)); System.out.println(&quot;s1 == s3 ?&quot; + (s1 == s3)); System.out.println(&quot;s1 == s3.intern() ?&quot; + (s1 == s3.intern())); System.out.println(&quot;s1 equals s3 ?&quot; + s1.equals(s3)); }} &#x7D50;&#x679C;&#xFF1A;1234s1 == s2 ?trues1 == s3 ?falses1 == s3.intern() ?trues1 equals s3 ?true &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; What is Java String Pool?","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[SQL] How to get rank using ANSI SQL","slug":"SQL-How-to-get-rank-using-ANSI-SQL","date":"2016-12-09T10:57:02.000Z","updated":"2016-12-13T07:16:52.000Z","comments":true,"path":"2016/12/09/SQL-How-to-get-rank-using-ANSI-SQL/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/SQL-How-to-get-rank-using-ANSI-SQL/","excerpt":"","text":"&#x8981;&#x5C0D;&#x5206;&#x6578;&#x505A;&#x6392;&#x540D;&#xFF0C;&#x6700;&#x76F4;&#x63A5;&#x7684;&#x60F3;&#x6CD5;&#x5C31;&#x5C0D;&#x5B83;&#x5011;&#x505A;ORDER BY&#x3002;&#x4F46;&#x662F;&#x7576;&#x5206;&#x6578;&#x6709;&#x91CD;&#x8907;&#x6642;&#x5019;&#x6392;&#x540D;&#x662F;&#x8981;&#x4E00;&#x6A23;&#xFF0C;&#x9019;&#x6642;&#x5019;ORDER BY&#x5C31;&#x767C;&#x63EE;&#x4E0D;&#x4E86;&#x4F5C;&#x7528;&#x3002; &#x4E0D;&#x540C;&#x7684;&#x5EE0;&#x5546;&#x7684;&#x8CC7;&#x6599;&#x5EAB;&#x6709;&#x63D0;&#x4F9B;&#x4E0D;&#x540C;&#x7684;&#x51FD;&#x6578;&#x53EF;&#x4EE5;&#x89E3;&#x6C7A;&#x9019;&#x500B;&#x554F;&#x984C;&#xFF0C;&#x5047;&#x5982;&#x6C92;&#x6709;&#x4F7F;&#x7528;&#x51FD;&#x6578;&#x8A72;&#x5982;&#x4F55;&#x505A;&#x5230;&#x5462;? &#x5EFA;&#x7ACB;&#x8CC7;&#x6599;&#x8868;&#xFF1A;123456CREATE TABLE `golf` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(45) DEFAULT NULL, `score` int(11) DEFAULT NULL, PRIMARY KEY (`id`)); &#x65B0;&#x589E;&#x8CC7;&#x6599;&#xFF1A;1234567INSERT INTO `golf`(`name`,`score`) VALUES (A,74);INSERT INTO `golf`(`name`,`score`) VALUES (B,79);INSERT INTO `golf`(`name`,`score`) VALUES (C,79);INSERT INTO `golf`(`name`,`score`) VALUES (D,82);INSERT INTO `golf`(`name`,`score`) VALUES (E,89);INSERT INTO `golf`(`name`,`score`) VALUES (F,89);INSERT INTO `golf`(`name`,`score`) VALUES (G,98); &#x67E5;&#x8A62;&#xFF1A;12345678910111213141516SELECT tmp.name, tmp.score, (SELECT COUNT(*) + 1 FROM (SELECT golf.score FROM golf GROUP BY golf.score) AS tmp1 WHERE tmp1.score &gt; tmp.score) AS rankFROM golf AS tmpORDER BY tmp.score DESC; &#x7D50;&#x679C;&#xFF1A;12345678name score rankG 98 1E 89 2F 89 2D 82 3B 79 4C 79 4A 74 5 &#x60F3;&#x6CD5;&#xFF1A;&#x5148;&#x5F9E;&#x6392;&#x540D;&#x9019;&#x500B;&#x6982;&#x5FF5;&#x4E0B;&#x624B;&#xFF0C;&#x5047;&#x5982;&#x6709;&#x4E09;&#x500B;&#x4EBA;&#x7684;&#x5206;&#x6578;(&#x9019;&#x4E09;&#x4EBA;&#x5206;&#x6578;&#x90FD;&#x4E0D;&#x4E00;&#x6A23;)&#x5927;&#x65BC;&#x6211;&#x7684;&#x5206;&#x6578;&#xFF0C;&#x90A3;&#x9EBC;&#x6211;&#x5C31;&#x662F;&#x6392;&#x540D;&#x7B2C;&#x56DB;&#x3002;&#x56E0;&#x70BA;&#x5206;&#x6578;&#x91CD;&#x8907;&#x7684;&#x6392;&#x540D;&#x662F;&#x4E00;&#x6A23;&#x7684;&#xFF0C;&#x9700;&#x8981;&#x5148;&#x5C0D;&#x5206;&#x6578;&#x505A;&#x4E00;&#x6B21;GROUP BY&#xFF0C;&#x518D;&#x6839;&#x64DA;&#x4E0A;&#x8FF0;&#x7684;&#x6982;&#x5FF5;&#x53BB;&#x7B97;&#x51FA;&#x6392;&#x540D;&#x3002;","categories":[{"name":"SQL","slug":"SQL","permalink":"https://pandaforme.github.io/categories/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"https://pandaforme.github.io/tags/SQL/"}]},{"title":"[Java] Synchronize in Java","slug":"Java-Synchronize-in-Java","date":"2016-12-09T09:31:00.000Z","updated":"2016-12-09T10:04:50.000Z","comments":true,"path":"2016/12/09/Java-Synchronize-in-Java/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-Synchronize-in-Java/","excerpt":"","text":"&#x5728;&#x4E86;&#x89E3;Java&#x7684;synchronized&#x6A5F;&#x5236;&#x4E4B;&#x524D;&#xFF0C;&#x5148;&#x4F86;&#x8907;&#x7FD2;&#x4E00;&#x4E0B;Monitor&#x3002; &#x53EF;&#x4EE5;&#x628A;Monitor&#x60F3;&#x50CF;&#x6210;&#x5B83;&#x5C31;&#x662F;&#x4E00;&#x500B;&#x985E;&#x5225;&#xFF0C;&#x88E1;&#x9762;&#x5B58;&#x653E;&#x8457;&#x5171;&#x4EAB;&#x8B8A;&#x6578;&#x3001;&#x65B9;&#x6CD5;&#x548C;&#x5EFA;&#x69CB;&#x5B50;&#x3002;Monitor&#x6703;&#x78BA;&#x4FDD;&#x53EA;&#x6709;&#x4E00;&#x500B;Process&#x53EF;&#x4EE5;&#x9032;&#x5165;&#xFF0C;&#x5176;&#x4ED6;&#x4E5F;&#x60F3;&#x8981;&#x9032;&#x5165;&#x7684;Process&#xFF0C;&#x5C31;&#x5FC5;&#x9808;&#x5728;queue&#x88E1;&#x9762;&#x7B49;&#x5F85;&#x3002;&#x7A0B;&#x5F0F;&#x8A2D;&#x8A08;&#x5E2B;&#x53EF;&#x4EE5;&#x6839;&#x64DA;&#x4E0D;&#x540C;&#x7684;&#x60C5;&#x6CC1;&#xFF0C;&#x6C7A;&#x5B9A;&#x662F;&#x5426;&#x8981;&#x8B93;&#x6B63;&#x5728;Monitor&#x7684;Process&#x9032;&#x5165;waiting state&#x6216;&#x662F;&#x559A;&#x9192;&#x5176;&#x4ED6;&#x5728;waiting state&#x7684;Process&#x3002; &#x4F8B;&#x5982;&#xFF1A;&#x7576;&#x67D0;&#x500B;Process&#x53D6;&#x5F97;Monitor&#x7684;&#x57F7;&#x884C;&#x6B0A;&#x5229;&#xFF0C;&#x5728;&#x57F7;&#x884C;&#x904E;&#x7A0B;&#x4E2D;&#x767C;&#x73FE;&#x4E0D;&#x7B26;&#x5408;x&#x60C5;&#x6CC1;&#xFF0C;&#x5FC5;&#x9808;&#x9032;&#x5165;waiting state&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;x.wait()&#x3002;&#x60F3;&#x8981;&#x559A;&#x9192;x queue&#x4E2D;&#x7684;waiting Process&#xFF0C;&#x53EF;&#x4EE5;&#x900F;&#x904E;x.signal()&#x3002;&#x8A73;&#x7D30;&#x53EF;&#x4EE5;&#x53C3;&#x8003;Operating System Concepts&#x3002; Java&#x7684;synchronized&#x5C31;&#x662F;&#x5BE6;&#x4F5C;&#x4E86;Monitor&#xFF0C;Object&#x7684;wait()&#x548C;notify()&#x5C31;&#x76F8;&#x7576;&#x65BC;wait()&#x548C;signal()&#x3002;&#x6709;&#x4E86;&#x9019;&#x6A23;&#x7684;&#x6982;&#x5FF5;&#x5F8C;&#xFF0C;&#x5728;&#x4F7F;&#x7528;synchronized&#x5C31;&#x6BD4;&#x8F03;&#x4E0D;&#x6703;&#x767C;&#x751F;&#x9396;&#x932F;&#x5C0D;&#x8C61;&#x7684;&#x554F;&#x984C;&#x3002; synchronized&#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x5206;&#x70BA;&#x5169;&#x7A2E;&#xFF1A; synchronized mehtod synchronized block ###&#x7BC4;&#x4F8B;&#xFF1A;TargetObject.java&#xFF1A;1234567891011121314151617181920212223public class TargetObject { private static int count = 0; public void method1() { count++; System.out.println(Thread.currentThread().getName() + &quot; in method1 and count = &quot; + count); } public void method2() { count++; System.out.println(Thread.currentThread().getName() + &quot; in method2 and count = &quot; + count); } public static void staticMethod1() { count++; System.out.println(Thread.currentThread().getName() + &quot; in static method1 and count = &quot; + count); } public static void staticMethod2() { count++; System.out.println(Thread.currentThread().getName() + &quot; in static method2 and count = &quot; + count); }} Thread1.java&#xFF1A;1234567891011121314151617181920public class Thread1 implements Runnable { private TargetObject targetObject; public Thread1(TargetObject targetObject) { this.targetObject = targetObject; } @Override public void run() { while (true) { this.targetObject.method1(); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } }} Thread2.java&#xFF1A;1234567891011121314151617181920public class Thread2 implements Runnable { private TargetObject targetObject; public Thread1(TargetObject targetObject) { this.targetObject = targetObject; } @Override public void run() { while (true) { this.targetObject.method2(); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } }} Run.java&#xFF1A;123456789public class Run { public static void main(String[] args) { TargetObject targetObject = new TargetObject(); Thread thread1 = new Thread(new Thread1(targetObject), &quot;Thread1&quot;); Thread thread2 = new Thread(new Thread2(targetObject), &quot;Thread2&quot;); thread1.start(); thread2.start(); }} &#x57F7;&#x884C;&#x7D50;&#x679C;&#xFF1A;&#x6C92;&#x6709;&#x505A;&#x540C;&#x6B65;&#x8655;&#x7406;&#xFF0C;&#x6703;&#x5B58;&#x5728;race condition&#x3002;123456Thread1 in method1 and count = 2Thread2 in method2 and count = 2Thread2 in method2 and count = 3Thread1 in method1 and count = 4Thread2 in method2 and count = 5Thread2 in method2 and count = 6 &#x4F7F;&#x7528;synchronized method &#x5728;TargetObject.java&#x4E2D;&#x7684;method1&#x548C;method2&#x52A0;&#x4E0A;synchronized&#x5C31;&#x53EF;&#x4EE5;&#x9396;&#x5B9A;&#x7531;TargetObject&#x985E;&#x5225;&#x6240;&#x5BE6;&#x9AD4;&#x5316;&#x7684;&#x7269;&#x4EF6;targetObject&#x3002; TargetObject.java1234567891011121314151617181920212223public class TargetObject { private static int count = 0; public synchronized void method1() { count++; System.out.println(Thread.currentThread().getName() + &quot; in method1 and count = &quot; + count); } public synchronized void method2() { count++; System.out.println(Thread.currentThread().getName() + &quot; in method2 and count = &quot; + count); } public static void staticMethod1() { count++; System.out.println(Thread.currentThread().getName() + &quot; in static method1 and count = &quot; + count); } public static void staticMethod2() { count++; System.out.println(Thread.currentThread().getName() + &quot; in static method2 and count = &quot; + count); }} &#x57F7;&#x884C;&#x7D50;&#x679C;&#xFF1A;123456789Thread1 in method1 and count = 1Thread2 in method2 and count = 2Thread2 in method2 and count = 3Thread1 in method1 and count = 4Thread2 in method2 and count = 5Thread2 in method2 and count = 6Thread1 in method1 and count = 7Thread2 in method2 and count = 8Thread2 in method2 and count = 9 &#x70BA;&#x4E86;&#x66F4;&#x6E05;&#x695A;&#x4E86;&#x89E3;&#x9396;&#x5B9A;&#x7684;&#x5C0D;&#x8C61;&#xFF0C;&#x73FE;&#x5728;&#x5148;&#x79FB;&#x9664;method1&#x7684;synchronized&#xFF0C;&#x5C07;&#x540C;&#x6B65;&#x6A5F;&#x5236;&#x5BEB;&#x5230;Thread1.java&#x3002; Thread1.java12345678910111213141516171819202122public class Thread1 implements Runnable { private TargetObject targetObject; public Thread1(TargetObject targetObject) { this.targetObject = targetObject; } @Override public void run() { while (true) { synchronized (targetObject) { this.targetObject.method1(); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } } }} &#x57F7;&#x884C;&#x7D50;&#x679C;&#xFF1A;123456789Thread1 in method1 and count = 1Thread2 in method2 and count = 2Thread2 in method2 and count = 3Thread1 in method1 and count = 4Thread2 in method2 and count = 5Thread2 in method2 and count = 6Thread1 in method1 and count = 7Thread2 in method2 and count = 8Thread2 in method2 and count = 9 &#x5F9E;&#x57F7;&#x884C;&#x7D50;&#x679C;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x4E0A;&#x9396;&#x7684;&#x5C0D;&#x8C61;&#x662F;&#x5728;Run.java&#x4E2D;&#x5BE6;&#x9AD4;&#x5316;&#x7684;targetObject&#x3002; &#x82E5;&#x5C07; Thread1.java&#x4E2D;&#x7684;this.targetObject.method1()&#x6539;&#x6210;TargetObject.staticMethod1()&#x3002; Thread2.java&#x4E2D;&#x7684;this.targetObject.method2()&#x6539;&#x6210;TargetObject.staticMethod2()&#x3002; &#x5FC5;&#x9808;&#x5C0D;TargetObject&#x7684;staticMethod1&#x548C;staticMethod2&#x505A;synchronized&#x3002;&#x900F;&#x904E;&#x4E0A;&#x8FF0;&#x7684;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x77E5;&#x9053;synchronized static method&#x662F;&#x9396;&#x5B9A;TargetObject.class&#x3002; &#x4F7F;&#x7528;synchronized block 123synchronized(&#x60F3;&#x8981;&#x9396;&#x5B9A;&#x7684;&#x7269;&#x4EF6;&#x6216;&#x662F;class literal){ //do something} synchronized block&#x8F03;&#x6709;&#x5F48;&#x6027;&#xFF0C;&#x53EF;&#x4EE5;&#x9078;&#x64C7;&#x9396;&#x5B9A;&#x7684;&#x5C0D;&#x8C61;&#x3002;Thread1.java&#xFF1A;123456789101112131415161718192021222324public class Thread1 implements Runnable { private TargetObject targetObject; private byte[] lock; public Thread1(TargetObject targetObject, byte[] lock) { this.targetObject = targetObject; this.lock = lock; } @Override public void run() { while (true) { synchronized (this.lock) { this.targetObject.method1(); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } } }} Thread2.java&#xFF1A;123456789101112131415161718192021222324public class Thread2 implements Runnable { private TargetObject targetObject; private byte[] lock; public Thread2(TargetObject targetObject, byte[] lock) { this.targetObject = targetObject; this.lock = lock; } @Override public void run() { while (true) { synchronized (this.lock) { this.targetObject.method2(); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } } }} Run.java&#xFF1A;1234567891011public class Run { public static void main(String[] args) { TargetObject targetObject = new TargetObject(); final byte[] lock = new byte[0]; Thread thread1 = new Thread(new Thread1(targetObject, lock), &quot;Thread1&quot;); Thread thread2 = new Thread(new Thread2(targetObject, lock), &quot;Thread2&quot;); thread1.start(); thread2.start(); }} &#x5728;&#x4F7F;&#x7528;synchronized&#x7684;&#x6642;&#x5019;&#xFF0C;&#x52D9;&#x5FC5;&#x8981;&#x641E;&#x6E05;&#x695A;&#x9396;&#x5B9A;&#x7684;&#x5C0D;&#x8C61;&#xFF0C;&#x6C92;&#x6709;&#x641E;&#x6E05;&#x695A;&#x53CD;&#x800C;&#x7B49;&#x540C;&#x65BC;&#x6C92;&#x6709;&#x540C;&#x6B65;&#x3002;","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[SQL] 5 types of SQL JOIN","slug":"SQL-5-types-of-SQL-JOIN","date":"2016-12-09T09:30:08.000Z","updated":"2016-12-13T07:16:46.000Z","comments":true,"path":"2016/12/09/SQL-5-types-of-SQL-JOIN/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/SQL-5-types-of-SQL-JOIN/","excerpt":"","text":"ANSI-standard SQL&#x6709;&#x4E94;&#x7A2E;JOIN&#xFF1A; INNER JOIN LEFT OUTER JOIN RIGHT OUTER JOIN FULL OUTER JOIN CROSS JOIN A Visual Explanation of SQL Joins&#x7528;Venn diagrams&#x65B9;&#x5F0F;&#x5716;&#x89E3;JOIN&#x3002; &#x7BC4;&#x4F8B;&#xFF1A;1234567TableA TableBid name id name-- ---- -- ----1 Pirate 1 Rutabaga2 Monkey 2 Pirate3 Ninja 3 Darth Vader4 Spaghetti 4 Ninja INNER JOIN&#xFF1A; SQL&#xFF1A;123SELECT * FROM TableAINNER JOIN TableBON TableA.name = TableB.name &#x7D50;&#x679C;&#xFF1A;12345TableA TableBid name id name-- ---- -- ----1 Pirate 2 Pirate3 Ninja 4 Ninja Venn diagram&#xFF1A; &#x5217;&#x51FA;&#x5169;&#x500B;Table&#x5171;&#x6709;&#x7684;&#x8CC7;&#x6599;&#xFF0C;&#x5373;&#x5169;&#x500B;Table&#x7684;&#x4EA4;&#x96C6;&#x3002; LEFT OUTER JOIN&#xFF1A; SQL&#xFF1A;123SELECT * FROM TableALEFT OUTER JOIN TableBON TableA.name = TableB.name &#x7D50;&#x679C;&#xFF1A;1234567TableA TableBid name id name-- ---- -- ----1 Pirate 2 Pirate2 Monkey null null3 Ninja 4 Ninja4 Spaghetti null null Venn diagram&#xFF1A;&#x4EE5;&#x5DE6;&#x908A;Table&#x70BA;&#x4E3B;&#xFF0C;&#x82E5;&#x6C92;&#x6709;&#x914D;&#x5C0D;&#x5230;&#x8CC7;&#x6599;&#xFF0C;&#x986F;&#x793A;null&#x3002; RIGHT OUTER JOIN&#xFF1A; &#x8DDF;LEFT OUTER JOIN&#x5927;&#x540C;&#x5C0F;&#x7570;&#xFF0C;&#x7D50;&#x679C;&#x6539;&#x6210;&#x4EE5;Table B&#x70BA;&#x4E3B;&#xFF0C;&#x4E0D;&#x518D;&#x8D05;&#x8FF0;&#x3002; FULL OUTER JOIN&#xFF1A; SQL&#xFF1A;123SELECT * FROM TableAFULL OUTER JOIN TableBON TableA.name = TableB.name &#x7D50;&#x679C;&#xFF1A;123456789TableA TableBid name id name-- ---- -- ----1 Pirate 2 Pirate2 Monkey null null3 Ninja 4 Ninja4 Spaghetti null nullnull null 1 Rutabaganull null 3 Darth Vader Venn diagram&#xFF1A;&#x70BA;&#x5169;&#x500B;Table&#x7684;&#x806F;&#x96C6;&#xFF0C;&#x82E5;&#x6C92;&#x6709;&#x914D;&#x5C0D;&#x5230;&#x8CC7;&#x6599;&#x4EE5;null&#x986F;&#x793A;&#x3002; CROSS JOIN&#xFF1A;&#x5373;&#x662F;Cartesian product&#xFF0C;&#x6703;&#x7522;&#x751F;&#x5169;&#x500B;Table&#x6240;&#x6709;&#x7684;&#x7D44;&#x5408;&#x3002;SQL&#xFF1A;12SELECT * FROM TableACROSS JOIN TableB &#x7D50;&#x679C;&#xFF1A;4*4 = 16&#x7A2E;&#x7D44;&#x5408; &#x56E0;&#x70BA;CROSS JOIN&#x6703;&#x5C07;&#x6240;&#x6709;&#x7D44;&#x5408;&#x5217;&#x51FA;&#x4F86;&#xFF0C;&#x6240;&#x4EE5;&#x7576;&#x8CC7;&#x6599;&#x91CF;&#x9F90;&#x5927;&#x6642;&#x5019;&#xFF0C;&#x6548;&#x80FD;&#x6703;&#x8B8A;&#x5F97;&#x5F88;&#x5DEE;&#x3002; &#x7E3D;&#x7D50;&#xFF1A;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x4EE5;&#x4E0A;&#x7684;&#x4E94;&#x7A2E;JOIN&#x548C;&#x904E;&#x6FFE;&#x65B9;&#x5F0F;&#xFF0C;&#x5C0D;&#x5169;&#x500B;&#x96C6;&#x5408;&#x9032;&#x884C;&#x4EA4;&#x96C6;&#x3001;&#x806F;&#x96C6;&#x3001;&#x5DEE;&#x96C6;&#x7B49;&#x64CD;&#x4F5C;&#x3002; &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; A Visual Explanation of SQL Joins Join (SQL)) &#x5716;&#x89E3;SQL&#x7684;Join&#x3000; Visual Representation of SQL Joins","categories":[{"name":"SQL","slug":"SQL","permalink":"https://pandaforme.github.io/categories/SQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"https://pandaforme.github.io/tags/SQL/"}]},{"title":"The Law of Demeter","slug":"The-Law-of-Demeter","date":"2016-12-09T09:27:16.000Z","updated":"2016-12-09T09:27:32.000Z","comments":true,"path":"2016/12/09/The-Law-of-Demeter/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/The-Law-of-Demeter/","excerpt":"","text":"&#x66F4;&#x8A73;&#x7D30;&#x7684;&#x8AAA;&#x6CD5;&#x662F;&#x201C;Law of Demeter for Functions/Methods&#x201D; (LoD-F)&#xFF0C;&#x7C21;&#x55AE;&#x5316;Object&#x4E4B;&#x9593;&#x7684;&#x4E92;&#x52D5;&#xFF0C;&#x8B93;&#x591A;&#x500B;Object&#x4E0D;&#x8981;&#x4E92;&#x76F8;&#x76F8;&#x4F9D;&#x3002; &#x5B9A;&#x7FA9;&#xFF1A;The Law of Demeter for functions requires that a method M of an object O may only invoke the methods of the following kinds of objects: O itself M&#x2019;s parameters Any objects created/instantiated within M O&#x2019;s direct component objects A global variable, accessible by O, in the scope of M &#x7BC4;&#x4F8B;&#xFF1A;123456789101112131415161718192021222324252627282930313233343536/** * A Law of Demeter example in Java. * Created by Alvin Alexander, &lt;a href=&quot;http://devdaily.com&quot; title=&quot;http://devdaily.com&quot;&gt;http://devdaily.com&lt;/a&gt;. * This is an adaptation of the source code example from the book * The Pragmatic Programmer. */public class LawOfDemeterInJava{ private Topping cheeseTopping; /** * Good examples of following the Law of Demeter. */ public void goodExamples(Pizza pizza) { Foo foo = new Foo(); // (1) it&apos;s okay to call our own methods doSomething(); // (2) it&apos;s okay to call methods on objects passed in to our method int price = pizza.getPrice(); // (3) it&apos;s okay to call methods on any objects we create cheeseTopping = new CheeseTopping(); float weight = cheeseTopping.getWeightUsed(); // (4) any directly held component objects foo.doBar(); } private void doSomething() { // do something here ... }} &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; Law_of_Demeter Law of Demeter - Java examples","categories":[],"tags":[]},{"title":"[Java] Object equality in Java","slug":"Java-Object-equality-in-Java","date":"2016-12-09T09:26:05.000Z","updated":"2016-12-13T07:25:19.000Z","comments":true,"path":"2016/12/09/Java-Object-equality-in-Java/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-Object-equality-in-Java/","excerpt":"","text":"&#x5728;Java&#x4E2D;&#xFF0C;&#x8981;&#x6BD4;&#x8F03;&#x5169;&#x500B;&#x57FA;&#x672C;&#x578B;&#x614B;&#x7684;&#x8B8A;&#x6578;&#xFF0C;&#x8981;&#x4F7F;&#x7528;==&#x3002;&#x8981;&#x6BD4;&#x8F03;&#x5169;&#x500B;&#x7269;&#x4EF6;&#x578B;&#x614B;&#x7684;&#x8B8A;&#x6578;&#xFF0C;&#x8981;&#x4F7F;&#x7528;equals&#x3002; &#x56E0;&#x70BA;&#x6240;&#x6709;&#x7684;&#x7269;&#x4EF6;&#x90FD;&#x662F;&#x7E7C;&#x627F;Object&#xFF0C;&#x52A0;&#x4E0A;Object&#x7684;equals()&#x662F;&#x4F7F;&#x7528;==&#x5224;&#x5B9A;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;Override Object&#x7684;equals()&#x51FD;&#x5F0F;&#x3002; Object&#x7684;equals()&#x51FD;&#x5F0F;&#xFF1A;123public boolean equals(Object paramObject) { return (this == paramObject);} &#x7BC4;&#x4F8B;&#xFF1A;123456789101112131415161718192021222324public class Point { public final int x; public final int y; public Point(int x, int y) { this.x = x; this.y = y; } @Override public boolean equals(Object that) { if (that instanceof Point) { Point point = (Point) that; return this.x == point.x &amp;&amp; this.y == point.y; } return false; } @Override public int hashCode() { return Objects.hash(x,y); } } &#x6CE8;&#x610F;&#xFF1A;&#x7576;Override equals&#x6642;&#xFF0C;hashCode&#x6700;&#x597D;&#x4E5F;&#x8981;Override&#x3002; &#x4F8B;&#x5982;&#xFF1A;1234567891011121314151617public class PointTest { private Object point1; private Point point2; @Before public void setUp() { point1 = new Point(1, 1); point2 = new Point(1, 1); } @Test public void testCase() { Set&lt;Object&gt; set = new HashSet&lt;Object&gt;(); set.add(point1); assertTrue(set.contains(point2)); }} &#x8A08;&#x7B97;point2&#x7684;hashCode &#x8A08;&#x7B97;point1&#x7684;hashCode &#x82E5;hashCode&#x4E00;&#x6A23;&#x4EE3;&#x8868;&#x843D;&#x5728;&#x540C;&#x4E00;&#x500B;bucket &#x518D;&#x900F;&#x904E;equals&#x5224;&#x5225;&#x662F;&#x5426;&#x76F8;&#x7B49; hashCode&#x53EF;&#x4EE5;&#x900F;&#x904E;Objects.hash()&#x5354;&#x52A9;&#x8A08;&#x7B97;&#xFF0C;&#x6216;&#x662F;&#x81EA;&#x884C;&#x8A2D;&#x8A08;&#x516C;&#x5F0F;&#x3002;&#x4F8B;&#x5982;&#xFF1A;String&#x7684;hashCode)&#x3002; &#x6709;&#x883B;&#x591A;&#x985E;&#x4F3C;&#x7684;&#x6587;&#x7AE0;&#x63D0;&#x5230;&#x70BA;&#x4EC0;&#x9EBC;&#x8981;&#x7528;31&#x7576;&#x4E58;&#x6578;&#x5462;?&#x4F8B;&#x5982;&#xFF1A;Why does Java&#x2019;s hashCode() in String use 31 as a multiplier? &#x67E5;&#x4E86;&#x76F8;&#x95DC;&#x7684;&#x8A0E;&#x8AD6;&#x5E7E;&#x4E4E;&#x90FD;&#x662F;31&#x5F0F;&#x8CEA;&#x6578;&#x4E26;&#x4E14;jvm&#x53EF;&#x4EE5;&#x5C0D;&#x5176;&#x505A;&#x6700;&#x4F73;&#x5316;&#xFF0C;&#x500B;&#x4EBA;&#x63A8;&#x6E2C;&#x4E3B;&#x8981;&#x539F;&#x56E0;31&#x53EF;&#x4EE5;&#x5927;&#x5E45;&#x964D;&#x4F4E;collision&#x7684;&#x6A5F;&#x6703;&#xFF0C;&#x6216;&#x8A31;&#x6F14;&#x7B97;&#x6CD5;&#x6216;&#x662F;&#x6709;&#x76F8;&#x95DC;&#x7684;&#x8AD6;&#x6587;&#x6703;&#x6709;&#x66F4;&#x8A73;&#x7D30;&#x7684;&#x8AAA;&#x660E;&#x3002; &#x76F8;&#x95DC;&#x8CC7;&#x6599;&#xFF1A;&#x7269;&#x4EF6;&#x76F8;&#x7B49;&#x6027;&#xFF08;&#x4E0A;&#xFF09; &#x7BC4;&#x4F8B;&#x7684;&#x539F;&#x59CB;&#x78BC;&#xFF1A;https://github.com/pandaforme/ObjectEqual","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[Java] Multiple parameters in a constructor","slug":"Java-Multiple-parameters-in-a-constructor","date":"2016-12-09T09:25:31.000Z","updated":"2016-12-13T07:25:25.000Z","comments":true,"path":"2016/12/09/Java-Multiple-parameters-in-a-constructor/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-Multiple-parameters-in-a-constructor/","excerpt":"","text":"&#x5728;&#x958B;&#x767C;&#x7684;&#x904E;&#x7A0B;&#x4E2D;&#x5F88;&#x5E38;&#x6703;&#x78B0;&#x5230;&#x9700;&#x8981;&#x50B3;&#x5165;&#x5927;&#x91CF;&#x7684;&#x53C3;&#x6578;&#x5230;&#x5EFA;&#x69CB;&#x5B50;&#x7684;&#x60C5;&#x6CC1;&#xFF0C;&#x9019;&#x6A23;&#x505A;&#x6CD5;&#x6703;&#x8B93;&#x5176;&#x4ED6;&#x4EBA;&#x4E0D;&#x6613;&#x7406;&#x89E3;&#xFF0C;&#x9020;&#x6210;&#x7DAD;&#x8B77;&#x548C;&#x6E2C;&#x8A66;&#x4E0A;&#x7684;&#x56F0;&#x96E3;&#x3002;&#x5728;Clean Code: A Handbook of Agile Software Craftsmanship&#x6709;&#x63D0;&#x5230;&#xFF1A;&#x51FD;&#x5F0F;&#x7684;&#x53C3;&#x6578;&#x6700;&#x597D;&#x4E0D;&#x8981;&#x8D85;&#x904E;&#x4E09;&#x500B;&#x3002; &#x90A3;&#x9019;&#x6A23;&#x7684;&#x60C5;&#x6CC1;&#x61C9;&#x8A72;&#x8981;&#x600E;&#x9EBC;&#x505A;&#x6703;&#x6BD4;&#x8F03;&#x597D;&#x5462;&#xFF1F;&#x53EF;&#x4EE5;&#x5229;&#x7528;Effective Java (2nd Edition)&#x4E2D;&#x6240;&#x63D0;&#x5230;&#x7684;Builder pattern&#x4F86;&#x89E3;&#x6C7A;&#x3002; &#x4E26;&#x4E0D;&#x662F;&#x6BCF;&#x7A2E;&#x60C5;&#x6CC1;&#x90FD;&#x9069;&#x5408;&#x4F7F;&#x7528;Builder pattern&#x4F86;&#x89E3;&#x6C7A;&#xFF0C;Builder pattern&#x662F;&#x89E3;&#x6CD5;&#x4E4B;&#x4E00;&#x3002; &#x7BC4;&#x4F8B;&#xFF1A;&#x9084;&#x6C92;&#x6709;&#x4F7F;&#x7528;Builder pattern&#xFF1A;1234567891011121314151617181920212223242526272829303132333435363738public class NutritionFacts { private final int servingSize; // (mL) required private final int servings; // (per container) required private final int calories; // optional private final int fat; // (g) optional private final int sodium; // (mg) optional private final int carbohydrate; // (g) optional public NutritionFacts(int servingSize, int servings) { this(servingSize, servings, 0); } public NutritionFacts(int servingSize, int servings, int calories) { this(servingSize, servings, calories, 0); } public NutritionFacts(int servingSize, int servings, int calories, int fat) { this(servingSize, servings, calories, fat, 0); } public NutritionFacts(int servingSize, int servings, int calories, int fat, int sodium) { this(servingSize, servings, calories, fat, sodium, 0); } public NutritionFacts(int servingSize, int servings, int calories, int fat, int sodium, int carbohydrate) { this.servingSize = servingSize; this.servings = servings; this.calories = calories; this.fat = fat; this.sodium = sodium; this.carbohydrate = carbohydrate; }} &#x4F7F;&#x7528;Builder pattern&#xFF1A;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657public class NutritionFacts { private final int servingSize; private final int servings; private final int calories; private final int fat; private final int sodium; private final int carbohydrate; public static class Builder { // Required parameters private final int servingSize; private final int servings; // Optional parameters - initialized to default values private int calories = 0; private int fat = 0; private int carbohydrate = 0; private int sodium = 0; public Builder(int servingSize, int servings) { this.servingSize = servingSize; this.servings = servings; } public Builder calories(int val) { calories = val; return this; } public Builder fat(int val) { fat = val; return this; } public Builder carbohydrate(int val) { carbohydrate = val; return this; } public Builder sodium(int val) { sodium = val; return this; } public NutritionFacts build() { return new NutritionFacts(this); } } private NutritionFacts(Builder builder) { servingSize = builder.servingSize; servings = builder.servings; calories = builder.calories; fat = builder.fat; sodium = builder.sodium; carbohydrate = builder.carbohydrate; }} initialize NutritionFacts&#xFF1A;12NutritionFacts sodaDrink = new NutritionFacts.Builder(240, 8). calories(100).sodium(35).carbohydrate(27).build(); &#x6BD4;&#x8F03;&#xFF1A;&#x512A;&#x9EDE;&#xFF1A; &#x589E;&#x52A0;&#x53EF;&#x8B80;&#x6027;&#x3002; &#x8B93;&#x7269;&#x4EF6;&#x70BA;immutable&#x3002; &#x7F3A;&#x9EDE;&#xFF1A; builder&#x548C;object&#x7684;&#x7A0B;&#x5F0F;&#x78BC;&#x91CD;&#x8907;&#x6027;&#x5F88;&#x9AD8;&#x3002; &#x65B0;&#x589E;&#x6216;&#x522A;&#x9664;object&#x7684;attribute&#xFF0C;&#x9700;&#x8981;&#x56DE;&#x982D;&#x4FEE;&#x6539;builder&#x7A0B;&#x5F0F;&#x78BC;&#x3002;&#x4F8B;&#x5982;&#xFF1A;&#x540C;&#x6642;&#x8981;Override object&#x548C;builder&#x7684;equals(),hashCode()&#x3002; &#x9019;&#x88E1;&#x7684;Builder pattern&#x548C;Design Patterns: Elements of Reusable Object-Oriented Software&#x4E2D;&#x6240;&#x63D0;&#x5230;&#x7684;Builder pattern&#x4F3C;&#x4E4E;&#x4E0D;&#x4E00;&#x6A23;&#xFF0C;&#x4F46;&#x662F;&#x6982;&#x5FF5;&#x4E0A;&#x5F88;&#x76F8;&#x8FD1;&#x3002;&#x5F8C;&#x8005;&#x6703;&#x6709;&#x4E00;&#x500B;&#x5171;&#x7528;&#x7D44;&#x88DD;&#x548C;&#x5EFA;&#x69CB;Product&#x7684;interface&#xFF1B;&#x524D;&#x8005;&#x56E0;&#x70BA;&#x7D44;&#x88DD;&#x548C;&#x5EFA;&#x69CB;&#x6D41;&#x7A0B;&#x5DEE;&#x7570;&#x904E;&#x5927;&#xFF0C;&#x6240;&#x4EE5;&#x6C92;&#x6709;&#x5171;&#x7528;&#x7684;interface&#x3002;&#x6240;&#x4EE5;&#x524D;&#x8005;&#x5F88;&#x96E3;&#x505A;&#x5230;&#x62BD;&#x63DB;&#x4E0D;&#x540C;&#x7684;Concrete Builder&#x5C31;&#x53EF;&#x4EE5;&#x7522;&#x751F;&#x4E0D;&#x540C;&#x7684;&#x7684;Product&#x3002; &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; Book Review: Effective Java 2nd Edition Creating and Destroying Java Objects","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[Java] 4 types of Java inner classes","slug":"Java-4-types-of-Java-inner-classes","date":"2016-12-09T09:24:23.000Z","updated":"2016-12-13T07:25:55.000Z","comments":true,"path":"2016/12/09/Java-4-types-of-Java-inner-classes/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-4-types-of-Java-inner-classes/","excerpt":"","text":"Java&#x4E2D;&#x6709;&#x56DB;&#x7A2E;inner class&#xFF0C;&#x5206;&#x5225;&#x662F;&#xFF1A; static inner class member inner Class local inner class anonymous inner class Static inner class&#xFF1A;123456789101112public class OutterClass { public static class InnerClass { public void print() { System.out.println(&quot;I am a static inner class&quot;); } } public static void main(String[] args) { OutterClass.InnerClass innerClass = new OutterClass.InnerClass(); innerClass.print(); } } static inner class&#x4E0D;&#x80FD;&#x5B58;&#x53D6;outter class&#x7684;memeber&#x6216;method&#xFF01;&#x82E5;&#x662F;&#x4E00;&#x5B9A;&#x8981;&#x5B58;&#x53D6;&#xFF0C;&#x5247;memeber&#x6216;method&#x8981;&#x7528;static&#x4FEE;&#x98FE;&#x3002; Member inner Class&#xFF1A;123456789101112131415161718192021222324public class OutterClass { private int x = 0; private InnerClass innerClass; public OutterClass() { innerClass = new InnerClass(); } private class InnerClass { private void print() { x = x++; System.out.println(&quot;Outer x is &quot; + x); } } public void print() { innerClass.print(); } public static void main(String[] args) { OutterClass outterClass = new OutterClass(); outterClass.print(); }} inner class&#x53EF;&#x4EE5;&#x81EA;&#x7531;&#x5B58;&#x53D6;outter class&#x7684;member&#x6216;method&#x3002; &#x901A;&#x5E38;&#x6703;&#x7528;private&#x4FEE;&#x98FE;inner class&#xFF0C;&#x9019;&#x6A23;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x516C;&#x4F48;&#x592A;&#x591A;&#x7684;&#x7D30;&#x7BC0;&#xFF0C;&#x9055;&#x53CD;&#x5C01;&#x88DD;&#x539F;&#x5247;&#x3002; Local inner class&#xFF1A;12345678910111213141516171819202122232425262728293031public class OutterClass { private int x = 0; public void print() { final int y = 10; class InnerClass implements Runnable { @Override public void run() { while (true) { System.out.println(&quot;The value of x in OutterClass is &quot; + x); System.out.println(&quot;The value of y in print() is &quot; + y); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } } } } new Thread(new InnerClass()).start(); } public static void main(String[] args) { OutterClass outterClass = new OutterClass(); outterClass.print(); }} inner class&#x53EF;&#x4EE5;&#x81EA;&#x7531;&#x5B58;&#x53D6;outter class&#x7684;member&#x548C;method&#x3002; inner class&#x8981;&#x5B58;&#x53D6;&#x6240;&#x5728;method&#x7684;&#x8B8A;&#x6578;&#xFF0C;&#x5FC5;&#x9808;&#x4F7F;&#x7528;final&#x4FEE;&#x98FE;&#x8A72;&#x8B8A;&#x6578;&#x3002;&#x539F;&#x56E0;&#xFF1A;&#x4EE5;&#x4E0A;&#x8FF0;&#x4F8B;&#x5B50;&#x70BA;&#x4F8B;&#xFF0C;&#x7576;&#x547C;&#x53EB;&#x5230;outterClass.print()&#xFF0C;&#x8B8A;&#x6578;y&#x5C31;&#x5931;&#x53BB;&#x4F5C;&#x7528;&#x4E86;&#x3002;&#x7136;&#x800C;InnerClass&#x8981;&#x518D;&#x5B58;&#x53D6;y&#x5C31;&#x6703;&#x51FA;&#x932F;&#xFF0C;&#x6240;&#x4EE5;&#x624D;&#x6703;&#x4F7F;&#x7528;final&#x4FEE;&#x98FE;&#x8B8A;&#x6578;y&#x3002;&#x5373;&#x8907;&#x88FD;&#x4E00;&#x4EFD;&#x8B8A;&#x6578;y&#x7D66;InnerClass&#x4F7F;&#x7528;&#xFF0C;&#x4E14;&#x503C;&#x90FD;&#x4E0D;&#x6703;&#x518D;&#x6539;&#x8B8A;&#x3002;Java 8&#x6709;&#x652F;&#x63F4;Closure&#x5C31;&#x53EF;&#x4EE5;&#x89E3;&#x6C7A;&#x6B64;&#x554F;&#x984C;&#x3002;Anonymous inner class&#xFF1A;123456789public static void main(String[] args) { new Runnable() { @Override public void run() { System.out.println(&quot;I am a anonymous class&quot;); } };} &#x6027;&#x8CEA;&#x548C;local inner class&#x76F8;&#x540C;&#x3002; &#x5982;&#x679C;&#x591A;&#x500B;&#x8B8A;&#x6578;&#x70BA;&#x76F8;&#x540C;&#x540D;&#x7A31;&#x6642;&#xFF0C;&#x9810;&#x8A2D;&#x6703;&#x9078;&#x7528;&#x8DDD;&#x96E2;inner class&#x6700;&#x8FD1;&#x7684;&#x8B8A;&#x6578;&#x3002;&#x4E0D;&#x904E;&#x5BE6;&#x52D9;&#x4E0A;&#x958B;&#x767C;&#x8005;&#x5F88;&#x5C11;&#x6703;&#x628A;&#x8B8A;&#x6578;&#x540D;&#x7A31;&#x53D6;&#x70BA;&#x76F8;&#x540C;&#xFF0C;&#x6709;&#x53EF;&#x80FD;&#x6703;&#x8B93;&#x8B80;&#x8005;&#x56F0;&#x60D1;&#x3002;&#x8ACB;&#x53C3;&#x8003;Shadowing&#x3002;123456789101112131415161718192021public class ShadowTest { public int x = 0; class FirstLevel { public int x = 1; void methodInFirstLevel(int x) { System.out.println(&quot;x = &quot; + x); System.out.println(&quot;this.x = &quot; + this.x); System.out.println(&quot;ShadowTest.this.x = &quot; + ShadowTest.this.x); } } public static void main(String... args) { ShadowTest st = new ShadowTest(); ShadowTest.FirstLevel fl = st.new FirstLevel(); fl.methodInFirstLevel(23); }} &#x7D50;&#x679C;&#xFF1A;123x = 23this.x = 1ShadowTest.this.x = 0 &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; 4 types of Java inner classes &#x8A8D;&#x8B58; Lambda/Closure&#xFF08;2&#xFF09;&#x4EC0;&#x9EBC;&#x662F; Closure&#xFF1F; &#x5167;&#x90E8;&#x985E;&#x5225;&#xFF08;Inner class&#xFF09; Shadowing","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[Java] The SerialVersionUID","slug":"Java-The-SerialVersionUID","date":"2016-12-09T09:24:00.000Z","updated":"2016-12-09T11:20:04.000Z","comments":true,"path":"2016/12/09/Java-The-SerialVersionUID/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-The-SerialVersionUID/","excerpt":"","text":"&#x7576;&#x5BE6;&#x4F5C;&#x4E86;Serializable interface&#x6642;&#xFF0C;Eclipse&#x7E3D;&#x662F;&#x6703;&#x63D0;&#x9192;&#x4F60;1The serializable class xxx does not declare a static final serialVersionUID field of type long serialVersionUID&#x76F8;&#x7576;&#x65BC;&#x9019;&#x500B;Object&#x7684;&#x7248;&#x672C;&#x63A7;&#x7BA1;&#xFF0C;&#x82E5;&#x4E0D;&#x5BA3;&#x544A;serialVersionUID&#xFF0C;JVM&#x6703;&#x5354;&#x52A9;&#x7522;&#x751F;&#x3002;&#x4F46;&#x662F;&#x56E0;&#x70BA;&#x6F14;&#x7B97;&#x6CD5;&#x5C0D;Object&#x5167;&#x5BB9;&#x6709;&#x76F8;&#x7576;&#x9AD8;&#x7684;&#x654F;&#x611F;&#x5EA6;&#x548C;&#x4E0D;&#x540C;&#x7684;JVM&#x6709;&#x4E0D;&#x540C;&#x7684;&#x5BE6;&#x4F5C;&#x65B9;&#x5F0F;&#xFF0C;&#x6240;&#x4EE5;&#x6709;&#x53EF;&#x80FD;Object&#x90FD;&#x4E00;&#x6A23;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x4E0D;&#x540C;JVM&#x4E0A;&#x7B97;&#x51FA;&#x7684;serialVersionUID&#x537B;&#x662F;&#x4E0D;&#x540C;&#xFF0C;&#x4E1F;&#x51FA;InvalidClassException&#x3002; &#x7BC4;&#x4F8B;&#xFF1A;1234567public class Person implements Serializable{ private static final long serialVersionUID = 1L; private int age; private String addres;} &#x63A5;&#x6536;&#x65B9;&#x5C07;Person Object&#x5E8F;&#x5217;&#x5316;&#x5B58;&#x5230;&#x786C;&#x789F;&#x4E0A;&#x3002; &#x4E4B;&#x5F8C;Person Object&#x505A;&#x4E86;&#x4FEE;&#x6539;12345public class Person implements Serializable{ private static final long serialVersionUID = 2L; private String name;} &#x6B64;&#x6642;&#xFF0C;&#x63A5;&#x6536;&#x65B9;&#x5617;&#x8A66;Person Object&#x53CD;&#x5E8F;&#x5217;&#x5316;&#xFF0C;&#x5C31;&#x6703;&#x4E1F;&#x51FA;InvalidClassException&#x3002; &#x90A3;&#x4E9B;&#x60C5;&#x6CC1;&#x5C6C;&#x65BC;&#x4E0D;&#x53EF;&#x76F8;&#x5BB9;&#x7684;&#x6539;&#x8B8A;&#xFF0C;&#x8ACB;&#x53C3;&#x8003;&#xFF1A;Incompatible Changes &#x90A3;&#x4E9B;&#x60C5;&#x6CC1;&#x5C6C;&#x65BC;&#x53EF;&#x76F8;&#x5BB9;&#x7684;&#x6539;&#x8B8A;&#xFF0C;&#x8ACB;&#x53C3;&#x8003;&#xFF1A;Compatible Changes &#x7576;Object&#x5167;&#x5BB9;&#x6539;&#x8B8A;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x64DA;&#x4E0A;&#x8FF0;&#x9023;&#x7D50;&#x4F86;&#x5224;&#x5B9A;&#x5C6C;&#x65BC;&#x53EF;&#x76F8;&#x5BB9;&#x7684;&#x6539;&#x8B8A;&#x6216;&#x662F;&#x4E0D;&#x53EF;&#x76F8;&#x5BB9;&#x7684;&#x6539;&#x8B8A;&#x3002;&#x82E5;&#x662F;&#x4E0D;&#x53EF;&#x76F8;&#x5BB9;&#x7684;&#x6539;&#x8B8A;&#x5C31;&#x8981;&#x4FEE;&#x6B63;serialVersionUID&#x7684;&#x503C;&#x3002; &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; Understand The SerialVersionUID Serializable (Java Platform SE 7)","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[Java] Enum in Java","slug":"Java-Enum-in-Java","date":"2016-12-09T09:23:29.000Z","updated":"2016-12-13T07:25:47.000Z","comments":true,"path":"2016/12/09/Java-Enum-in-Java/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-Enum-in-Java/","excerpt":"","text":"enum&#x985E;&#x5225;&#x53EF;&#x4EE5;&#x55AE;&#x7368;&#x5BA3;&#x544A;&#x6216;&#x662F;&#x5BA3;&#x544A;&#x5728;&#x5176;&#x4ED6;&#x985E;&#x5225;&#x88E1;&#x9762;&#x3002; &#x55AE;&#x7368;&#x5BA3;&#x544A;&#xFF1A;123public enum Direction { EAST,WEST,SOUTH,NORTH;} &#x5728;&#x7DE8;&#x8B6F;&#x6642;&#x671F;compiler&#x6703;&#x81EA;&#x52D5;&#xFF1A; &#x52A0;&#x5165;final&#x4FEE;&#x98FE;enum&#x548C;&#x7E7C;&#x627F;Enum&#xFF1A; 123public final enum Direction extends Enum{ EAST,WEST,SOUTH,NORTH;} &#x52A0;&#x5165;private Constructor&#xFF1A; 123456public final enum Direction extends Enum{ EAST,WEST,SOUTH,NORTH; private Direction(String s, int i){ super(s, i); }} &#x52A0;&#x5165;public static final&#x4FEE;&#x98FE;&#x5217;&#x8209;&#x5167;&#x5BB9;&#x503C;&#xFF1A; 12345678910public final enum Direction extends Enum{ public static final Direction EAST, public static final Direction WEST, public static final Direction SOUTH, public static final Direction NORTH; private Direction(String s, int i){ super(s, i); }} &#x521D;&#x59CB;&#x5316;&#xFF1A; 1234567891011121314151617public final enum Direction extends Enum{ public static final Direction EAST, public static final Direction WEST, public static final Direction SOUTH, public static final Direction NORTH; private Direction(String s, int i){ super(s, i); } static{ EAST = new Direction(&quot;EAST&quot;, 0); WEST = new Direction(&quot;WEST&quot;, 1); SOUTH = new Direction(&quot;SOUTH&quot;, 2); NORTH = new Direction(&quot;NORTH&quot;, 3); }} override Enum&#x7684;valueOf method&#x3002; &#x7522;&#x751F;&#x4E00;&#x500B;values method&#xFF0C;&#x56DE;&#x50B3;&#x503C;&#x70BA;enum&#x985E;&#x5225;&#x5167;&#x5BB9;&#x503C;&#x7684;&#x9663;&#x5217;&#x3002; &#x5BA3;&#x544A;&#x5728;&#x5176;&#x4ED6;&#x985E;&#x5225;&#xFF1A;12345public class DirectionOutter { public enum Direction { EAST,WEST,SOUTH,NORTH; }} &#x5728;&#x7DE8;&#x8B6F;&#x6642;&#x671F;compiler&#x6703;&#x81EA;&#x52D5;&#xFF1A; &#x52A0;&#x5165;static final&#x4FEE;&#x98FE;enum&#x548C;&#x7E7C;&#x627F;Enum&#xFF1A;12345public class DirectionOutter { public static final enum Direction extends Enum { EAST,WEST,SOUTH,NORTH; }} &#x5176;&#x9918;&#x884C;&#x70BA;&#x548C;&#x55AE;&#x7368;&#x5BA3;&#x544A;&#x4E00;&#x6A23;&#x3002; &#x7576;&#x5BA3;&#x544A;&#x4E00;&#x500B;enum&#x985E;&#x5225;&#xFF0C;compiler&#x6703;&#x201D;&#x81EA;&#x52D5;&#x201D;&#x505A;&#x90A3;&#x9EBC;&#x591A;&#x4E8B;&#xFF0C;&#x6703;&#x6709;&#x4EE5;&#x4E0B;&#x7279;&#x6027;&#xFF1A; &#x81EA;&#x52D5;&#x7E7C;&#x627F;Enum&#x62BD;&#x8C61;&#x985E;&#x5225;&#xFF0C;&#x56E0;&#x70BA;Enum&#x62BD;&#x8C61;&#x985E;&#x5225;&#x5BE6;&#x505A;&#x4E86;Comparable&#x548C;Serializable&#xFF0C;&#x6240;&#x4EE5;enum&#x7269;&#x4EF6;&#x4E4B;&#x9593;&#x662F;&#x53EF;&#x4EE5;&#x6BD4;&#x8F03;&#x548C;enum&#x7269;&#x4EF6;&#x662F;&#x53EF;&#x4EE5;&#x5E8F;&#x5217;&#x5316;&#x3002; enum&#x985E;&#x5225;&#x4E0D;&#x80FD;&#x7E7C;&#x627F;&#x5176;&#x4ED6;&#x985E;&#x5225;&#x6216;&#x88AB;&#x7E7C;&#x627F;&#x3002; enum&#x7269;&#x4EF6;&#x70BA;Singleton&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;==&#x6216;equals&#x9032;&#x884C;&#x6BD4;&#x8F03;&#x3002; enum&#x7269;&#x4EF6;&#x70BA;immutable&#x7269;&#x4EF6;&#x3002; &#x5EFA;&#x69CB;&#x5B50;&#x5B58;&#x53D6;&#x6B0A;&#x9650;&#x4E00;&#x5B9A;&#x662F;private&#x3002; &#x53EA;&#x6709;compiler&#x53EF;&#x4EE5;&#x7E7C;&#x627F;Enum&#x3002; &#x589E;&#x52A0;&#x5C6C;&#x6027;&#xFF1A;12345678910111213141516public enum Direction { WEST(180), EAST(0), NORTH(90), SOUTH(270); private Direction(final int angle) { this.angle = angle; } private int angle; public int getAngle() { return angle; }} &#x5EFA;&#x69CB;&#x5B50;&#x7684;&#x5B58;&#x53D6;&#x6B0A;&#x9650;&#x53EF;&#x4EE5;&#x4E0D;&#x52A0;(compiler&#x6703;&#x81EA;&#x52D5;&#x52A0;&#x5165;private)&#x6216;&#x662F;&#x52A0;&#x5165;privae&#x3002; &#x5BE6;&#x4F5C;&#x62BD;&#x8C61;&#x65B9;&#x6CD5;&#xFF1A;12345678910111213141516171819202122232425262728293031323334353637public enum Direction { WEST(180) { @Override public void shout() { System.out.println(&quot;WEST&quot;); } }, EAST(0) { @Override public void shout() { System.out.println(&quot;EAST&quot;); } }, NORTH(90) { @Override public void shout() { System.out.println(&quot;NORTH&quot;); } }, SOUTH(270) { @Override public void shout() { System.out.println(&quot;SOUTH&quot;); } }; public abstract void shout(); Direction(final int angle) { this.angle = angle; } private int angle; public int getAngle() { return angle; }} &#x5C07;&#x503C;&#x8F49;&#x63DB;&#x6210;enum&#x6839;&#x64DA;&#x4F7F;&#x7528;&#x60C5;&#x5883;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;valueOf&#x8F49;&#x63DB;&#x6216;&#x662F;&#x81EA;&#x884C;&#x8A2D;&#x8A08;&#x8F49;&#x5316;&#x65B9;&#x5F0F;&#x3002; &#x82E5;&#x60F3;&#x5C07;&#x5B57;&#x4E32;WEST&#x8F49;&#x63DB;&#x6210;Direction.WEST&#xFF1A;&#x4F7F;&#x7528;valueOf 1Direction.valueOf(&quot;WEST&quot;); &#x7576;&#x4F7F;&#x7528;&#x8005;&#x8F38;&#x5165;180&#x5EA6;&#x6642;&#xFF0C;&#x8981;&#x8F49;&#x63DB;&#x6210;Direction.WEST&#xFF1A; 1234567891011121314151617181920212223public enum Direction { WEST(180),EAST(0),NORTH(90),SOUTH(270); Direction(final int angle) { this.angle = angle; } private int angle; public int getAngle() { return angle; } private static final Map&lt;Integer, Direction&gt; lookup = new HashMap&lt;Integer, Direction&gt;(); static { for (Direction s : Direction.values()) lookup.put(s.getAngle(), s); } public static Direction get(int angle) { return lookup.get(angle); } &#x900F;&#x904E;map&#x7269;&#x4EF6;&#x9032;&#x884C;&#x8F49;&#x63DB;&#x3002; &#x5C07;enum&#x7269;&#x4EF6;&#x5B58;&#x653E;&#x5230;&#x5BB9;&#x5668;&#xFF1A; EumSet&#xFF1A; &#x7528;EnumSet&#x4F86;&#x5B58;&#x653E;enum&#x7269;&#x4EF6;&#x7684;&#x6642;&#x9593;&#x548C;&#x7A7A;&#x9593;&#x6548;&#x80FD;&#x8F03;&#x597D;&#x3002; &#x5728;&#x591A;&#x57F7;&#x884C;&#x7DD2;&#x5BE6;&#x884C;&#x4E0B;&#x662F;&#x4E0D;&#x5B89;&#x5168;&#x3002; enum&#x7269;&#x4EF6;&#x5728;EnumSet&#x7684;&#x9806;&#x5E8F;&#x70BA;&#x5728;&#x5BA3;&#x544A;&#x6642;&#x5019;&#x7684;&#x9806;&#x5E8F;&#x3002; EnumMap&#xFF1A; &#x7528;EnumSet&#x4F86;&#x5B58;&#x653E;enum&#x7269;&#x4EF6;&#x7684;&#x6642;&#x9593;&#x548C;&#x7A7A;&#x9593;&#x6548;&#x80FD;&#x8F03;&#x597D;&#x3002; &#x5728;&#x591A;&#x57F7;&#x884C;&#x7DD2;&#x5BE6;&#x884C;&#x4E0B;&#x662F;&#x4E0D;&#x5B89;&#x5168;&#x3002;&#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; Guide for understanding enum in java","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[Java] Heap space vs. Stack","slug":"Java-Heap-space-vs-Stack","date":"2016-12-09T09:22:47.000Z","updated":"2016-12-13T07:25:43.000Z","comments":true,"path":"2016/12/09/Java-Heap-space-vs-Stack/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-Heap-space-vs-Stack/","excerpt":"","text":"&#x5728;&#x7406;&#x89E3;Java&#x662F;&#x5426;&#x70BA;Pass by Value(&#x53C3;&#x8003;&#x9019;&#x7BC7;&#x6587;&#x7AE0;)&#x4E4B;&#x524D;&#xFF0C;&#x5EFA;&#x8B70;&#x5148;&#x4E86;&#x89E3;heap&#x548C;stack&#x7684;&#x529F;&#x7528;&#x3002; Heap space&#xFF1A; &#x7576;&#x5EFA;&#x7ACB;&#x7269;&#x4EF6;&#x6642;&#xFF0C;&#x6703;&#x5728;heap space&#x5206;&#x914D;&#x4E00;&#x500B;&#x7A7A;&#x9593;&#x7D66;&#x7269;&#x4EF6;&#x4F7F;&#x7528;&#x3002; &#x6240;&#x6709;&#x5728;heap space&#x4E0A;&#x7684;&#x7269;&#x4EF6;&#xFF0C;&#x90FD;&#x53EF;&#x4EE5;&#x88AB;&#x5176;&#x4ED6;&#x7684;thread&#x5B58;&#x53D6;&#x3002; Garbage Collection&#x6703;&#x6E05;&#x9664;heap space&#x5167;&#x6C92;&#x6709;&#x88AB;&#x4F7F;&#x7528;&#x5230;&#x7684;&#x7269;&#x4EF6;&#x3002; &#x53EF;&#x900F;&#x904E;-Xms&#x53C3;&#x6578;&#x8ABF;&#x6574;heap space&#x7684;&#x958B;&#x59CB;&#x5927;&#x5C0F;&#x3002; &#x53EF;&#x900F;&#x904E;-Xmx&#x53C3;&#x6578;&#x8A2D;&#x5B9A;heap space&#x7684;&#x6700;&#x5927;&#x503C;&#x3002; &#x5047;&#x5982;heap space&#x6EFF;&#x4E86;&#xFF0C;Java&#x6703;&#x4E1F;&#x51FA;Java Heap Space```1234567 * Stack&#xFF1A; 1. &#x82E5;&#x8B8A;&#x6578;&#x662F;&#x57FA;&#x672C;&#x578B;&#x614B;&#xFF0C;&#x5C31;&#x5B58;&#x653E;&#x5B83;&#x7684;&#x503C;&#x3002; 2. &#x82E5;&#x8B8A;&#x6578;&#x662F;&#x7269;&#x4EF6;&#xFF0C;&#x5C31;&#x5B58;&#x653E;&#x5B83;&#x5728;heap space&#x7684;&#x4F4D;&#x7F6E;&#x3002; 3. stack&#x4E0D;&#x80FD;&#x88AB;&#x5176;&#x4ED6;thead&#x5B58;&#x53D6;&#x3002; 4. &#x53EF;&#x900F;&#x904E;-Xss&#x53C3;&#x6578;&#x8ABF;&#x6574;stack&#x5927;&#x5C0F;&#x3002; 5. &#x5047;&#x5982;stack&#x6EFF;&#x4E86;&#xFF0C;Java&#x6703;&#x4E1F;&#x51FA;```java java.lang.StackOverFlowError &#x7BC4;&#x4F8B;&#xFF1A;123456789101112131415public class Memory { public static void main(String[] args) { // Line 1 int i=1; // Line 2 Object obj = new Object(); // Line 3 Memory mem = new Memory(); // Line 4 mem.foo(obj); // Line 5 } // Line 9 private void foo(Object param) { // Line 6 String str = param.toString(); //// Line 7 System.out.println(str); } // Line 8 } &#x7576;&#x958B;&#x59CB;&#x57F7;&#x884C;&#x7A0B;&#x5F0F;&#x6642;&#x5019;&#xFF0C;JVM&#x6703;&#x8F09;&#x5165;&#x76F8;&#x95DC;&#x7684;class&#x5230;heap space&#x3002; &#x7522;&#x751F;main thread&#x4E26;&#x4E14;&#x5EFA;&#x7ACB;&#x5B83;&#x7684;stack&#x3002; &#x57F7;&#x884C;Line2&#xFF0C;&#x56E0;&#x70BA;i&#x662F;&#x57FA;&#x672C;&#x578B;&#x614B;&#xFF0C;&#x6240;&#x4EE5;push&#x5176;&#x503C;&#x5230;stack&#x3002; &#x57F7;&#x884C;Line3&#xFF0C;&#x56E0;&#x70BA;obj&#x662F;&#x7269;&#x4EF6;&#xFF0C;&#x6240;&#x4EE5;push&#x5B83;&#x5728;heap space&#x7684;&#x4F4D;&#x7F6E;&#x5230;stack&#x3002; &#x57F7;&#x884C;Line4&#xFF0C;&#x56E0;&#x70BA;mem&#x662F;&#x7269;&#x4EF6;&#xFF0C;&#x6240;&#x4EE5;push&#x5B83;&#x5728;heap space&#x7684;&#x4F4D;&#x7F6E;&#x5230;stack&#x3002; &#x57F7;&#x884C;Line6&#xFF0C;push obj&#x5728;heap space&#x7684;&#x4F4D;&#x7F6E;&#x5230;stack&#x3002; &#x57F7;&#x884C;Line7&#xFF0C;push obj.toString()&#x5728;heap space&#x7684;&#x4F4D;&#x7F6E;&#x5230;stack&#x3002; &#x57F7;&#x884C;Line8&#xFF0C;pop str&#x548C;param&#x3002; &#x57F7;&#x884C;Line9&#xFF0C;pop mem&#x3001;obj&#x548C;i&#xFF0C;&#x7A0B;&#x5F0F;&#x57F7;&#x884C;&#x7D50;&#x675F;&#x3002; &#x5982;&#x4F55;&#x900F;&#x904E;pop&#x5C6C;&#x65BC;&#x9019;&#x500B;method&#x7684;&#x8B8A;&#x6578;&#xFF0C;&#x63A8;&#x6E2C;&#x5BE6;&#x4F5C;&#x65B9;&#x5F0F;&#x6216;&#x8A31;&#x662F;&#x985E;&#x4F3C;&#x65BC;&#x56DB;&#x5247;&#x904B;&#x7B97;&#x3002; &#x4F8B;&#x5982;&#xFF1A; &#x57F7;&#x884C;Line1&#xFF0C;push &#x201C;{&#x201C;&#x3002; &#x57F7;&#x884C;Line6&#xFF0C;push &#x201C;{&#x201C;&#x3002; &#x57F7;&#x884C;Line8&#xFF0C;&#x4E00;&#x76F4;pop&#xFF0C;&#x76F4;&#x5230;&#x9047;&#x5230;&#x201D;{&#x201C;&#x505C;&#x6B62;&#x3002; &#x57F7;&#x884C;Line9&#xFF0C;&#x4E00;&#x76F4;pop&#xFF0C;&#x76F4;&#x5230;&#x9047;&#x5230;&#x201D;{&#x201C;&#x505C;&#x6B62;&#x3002; &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; Java Heap Memory vs Stack Memory Difference How will you go about explaining the following Java concepts to a beginner?","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[LeetCode] 277. Find the Celebrity","slug":"Celebrity-Problem","date":"2016-12-09T09:22:00.000Z","updated":"2018-05-07T10:56:48.403Z","comments":true,"path":"2016/12/09/Celebrity-Problem/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Celebrity-Problem/","excerpt":"","text":"QuestionSuppose you are at a party with n people (labeled from 0 to n - 1) and among them, there may exist one celebrity. The definition of a celebrity is that all the other n - 1 people know him/her but he/she does not know any of them. Now you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: &#x201C;Hi, A. Do you know B?&#x201D; to get information of whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense). You are given a helper function bool knows(a, b) which tells you whether A knows B. Implement a function int findCelebrity(n), your function should minimize the number of calls to knows. Note: There will be exactly one celebrity if he/she is in the party. Return the celebrity&#x2019;s label if there is a celebrity in the party. If there is no celebrity, return -1. Solution&#x5148;&#x5C0D;N&#x500B;&#x4EBA;&#x4F5C;&#x7DE8;&#x865F;&#xFF0C;&#x5F9E;1&#x5230;N&#x3002;&#x5148;&#x5F9E;&#x7DE8;&#x865F;1&#x7684;&#x4EBA;&#x958B;&#x59CB;&#xFF0C;&#x554F;&#x4ED6;&#x8A8D;&#x4E0D;&#x8A8D;&#x8B58;&#x7DE8;&#x865F;2&#x7684;&#x4EBA;&#x3002;&#x60C5;&#x6CC1;&#x6709;&#x5169;&#x7A2E;&#xFF1A; &#x7DE8;&#x865F;1&#x8A8D;&#x8B58;&#x7DE8;&#x865F;2&#xFF1A;&#x90A3;&#x9EBC;&#x7DE8;&#x865F;1&#x4E00;&#x5B9A;&#x4E0D;&#x662F;&#x540D;&#x4EBA;&#xFF0C;&#x7DE8;&#x865F;2&#x6709;&#x53EF;&#x80FD;&#x662F;&#x540D;&#x4EBA;&#x3002; &#x7DE8;&#x865F;1&#x4E0D;&#x8A8D;&#x8B58;&#x7DE8;&#x865F;2&#xFF1A;&#x7DE8;&#x865F;2&#x4E00;&#x5B9A;&#x4E0D;&#x662F;&#x540D;&#x4EBA;&#xFF0C;&#x56E0;&#x70BA;&#x540D;&#x4EBA;&#x8981;&#x6709;N-1&#x4EBA;&#x8A8D;&#x8B58;&#x4ED6;&#x3002; &#x6839;&#x64DA;&#x4EE5;&#x4E0A;&#x7D50;&#x679C;&#xFF0C;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x7D50;&#x8AD6;&#xFF1A; &#x7DE8;&#x865F;1&#x8A8D;&#x8B58;&#x7DE8;&#x865F;2&#xFF1A;&#x90A3;&#x9EBC;&#x7DE8;&#x865F;1&#x4E00;&#x5B9A;&#x4E0D;&#x662F;&#x540D;&#x4EBA;&#xFF0C;&#x7DE8;&#x865F;2&#x6709;&#x53EF;&#x80FD;&#x662F;&#x540D;&#x4EBA;&#x3002; &#x7DE8;&#x865F;1&#x4E0D;&#x8A8D;&#x8B58;&#x7DE8;&#x865F;2&#xFF1A;&#x7DE8;&#x865F;2&#x4E00;&#x5B9A;&#x4E0D;&#x662F;&#x540D;&#x4EBA;&#xFF0C;&#x7DE8;&#x865F;1&#x6709;&#x53EF;&#x80FD;&#x662F;&#x540D;&#x4EBA;&#x3002; &#x6BCF;&#x554F;&#x4E00;&#x4EBA;&#x5C31;&#x6703;&#x6DD8;&#x6C70;&#x6389;&#x4E00;&#x4EBA;&#xFF0C;&#x63A5;&#x8457;&#x7E7C;&#x7E8C;&#x554F;&#x53EF;&#x80FD;&#x662F;&#x540D;&#x4EBA;&#x7684;&#x4EBA;&#x9078;&#x548C;&#x4E0B;&#x4E00;&#x500B;&#x7DE8;&#x865F;&#x7684;&#x95DC;&#x4FC2;&#xFF0C;&#x76F4;&#x5230;&#x554F;&#x5B8C;N&#x500B;&#x4EBA;&#x5C31;&#x53EF;&#x4EE5;&#x627E;&#x51FA;&#x540D;&#x4EBA;&#x3002;&#x6642;&#x9593;&#x8907;&#x96DC;&#x5EA6;&#x662F; O(N)&#x3002; 12345678910111213141516public int findCelebrity(int n) { int celebrity = 0; for (int i = 1; i &lt; n; i++) { if (knows(celebrity, i)) celebrity = i; } for (int i = 0; i &lt; n; i++) { if (i != celebrity) { if (knows(celebrity, i) || !knows(i, celebrity)) return -1; } } return celebrity;} References Celebrity Problem &#x540D;&#x4EBA;&#x554F;&#x984C; (Celebrity problem)","categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://pandaforme.github.io/tags/LeetCode/"}]},{"title":"[Java] The details of Inheritance","slug":"Java-The-details-of-Inheritance","date":"2016-12-09T09:20:42.000Z","updated":"2016-12-13T07:24:49.000Z","comments":true,"path":"2016/12/09/Java-The-details-of-Inheritance/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-The-details-of-Inheritance/","excerpt":"","text":"&#x5728;Java&#x4F7F;&#x7528;&#x7E7C;&#x627F;&#x6642;&#x8981;&#x6CE8;&#x610F;&#x5E7E;&#x500B;&#x5C0F;&#x7D30;&#x7BC0;&#xFF0C;&#x4E0D;&#x7136;&#x5F88;&#x5BB9;&#x6613;&#x51FA;&#x932F;&#x3002; &#x5EFA;&#x69CB;&#x5B50;&#x7684;&#x547C;&#x53EB;&#x9806;&#x5E8F; compiler&#x6703;&#x81EA;&#x52D5;&#x7522;&#x751F;&#x7121;&#x53C3;&#x6578;&#x7684;&#x5EFA;&#x69CB;&#x5B50;&#xFF0C;&#x6703;&#x81EA;&#x52D5;&#x521D;&#x59CB;&#x5316;field&#x8B8A;&#x6578; &#x4F8B;&#x5982;&#xFF1A;123456789101112131415161718192021222324class Parent1{ int i; String s; /* compiler&#x6703;&#x81EA;&#x52D5;&#x7522;&#x751F;&#x7121;&#x53C3;&#x6578;&#x7684;&#x5EFA;&#x69CB;&#x5B50;&#xFF0C; * &#x4E26;&#x4E14;&#x521D;&#x59CB;&#x5316;field&#x8B8A;&#x6578; * public Parent1() { * i = 0; * s = null; * } */}class Parent2 extend Parent1{ public Parent2(int i){ //&#x56E0;&#x70BA;&#x6C92;&#x6709;&#x6307;&#x5B9A;&#x8981;&#x547C;&#x53EB;&#x7236;&#x985E;&#x5225;&#x7684;&#x54EA;&#x4E00;&#x500B;&#x5EFA;&#x69CB;&#x5B50;&#xFF0C; //compiler&#x6703;&#x81EA;&#x52D5;&#x547C;&#x53EB;super() }}class Son extend Parent2{ public Son(){ super(1); } } new Son()&#x7684;&#x6642;&#x5019;&#x6703;&#x547C;&#x53EB;Parent2&#x7684;&#x5EFA;&#x69CB;&#x5B50;(public Parent2(int i))&#xFF0C;Parent2&#x7684;&#x5EFA;&#x69CB;&#x5B50;&#x6703;&#x547C;&#x53EB;Parent1&#x7684;&#x5EFA;&#x69CB;&#x5B50;(public Parent1())&#x3002; &#x6CE8;&#x610F;&#xFF1A;&#x7576;&#x6C92;&#x6709;&#x5BEB;&#x5EFA;&#x69CB;&#x5B50;&#xFF0C;compiler&#x6703;&#x81EA;&#x52D5;&#x7522;&#x751F;&#x4E00;&#x500B;&#x7121;&#x53C3;&#x6578;&#x7684;&#x5EFA;&#x69CB;&#x5B50;&#x3002;&#x5728;&#x7E7C;&#x627F;&#x904E;&#x7A0B;&#x4E2D;&#x82E5;&#x6C92;&#x6709;&#x7279;&#x5225;&#x6307;&#x5B9A;&#x8981;&#x547C;&#x53EB;&#x7236;&#x985E;&#x5225;&#x7684;&#x54EA;&#x4E00;&#x500B;&#x5EFA;&#x69CB;&#x5B50;&#xFF0C;compiler&#x6703;&#x81EA;&#x52D5;&#x547C;&#x53EB;super()&#x3002; &#x4F86;&#x770B;&#x4E00;&#x500B;&#x4F8B;&#x5B50;&#xFF1A;1234567891011121314151617181920212223242526272829303132public class Base { int i; public Base() { add(1); } public void add(int j) { i += j; }}public class Extension extends Base { int i = 3; public Extension() { add(2); } public void add(int j) { i += j * 2; } public static void main(String[] args) { exec(new Extension()); } private static void exec(Extension base) { base.add(8); System.out.println(base.i); }} &#x6703;&#x5370;&#x51FA;&#x4EC0;&#x9EBC;&#x6A23;&#x7684;&#x7D50;&#x679C;&#x5462;&#xFF1F; &#x5206;&#x6790;&#xFF1A; new Extension()&#x7684;&#x6642;&#x5019;&#x6703;&#x547C;&#x53EB;Base&#x7684;&#x5EFA;&#x69CB;&#x5B50;(public Base())&#xFF0C;&#x547C;&#x53EB;add(2)&#x3002; &#x56E0;&#x70BA;Extension&#x6709;&#x8986;&#x5BEB;(override)Base&#x7684;add function&#xFF0C;&#x6240;&#x4EE5;Base&#x5EFA;&#x69CB;&#x5B50;&#x6240;&#x547C;&#x53EB;&#x7684;add(1)&#x662F;&#x547C;&#x53EB;Extension&#x4E2D;&#x7684;add function&#x3002; &#x56E0;&#x70BA;&#x591A;&#x578B;&#x7684;&#x95DC;&#x4FC2;&#xFF0C;&#x7576;Base&#x5EFA;&#x69CB;&#x5B50;&#x547C;&#x53EB;add(1)&#xFF0C;&#x88E1;&#x9762;&#x7684;i&#x662F;Extension&#x7684;i&#xFF0C;&#x4E26;&#x4E0D;&#x662F;Base&#x7684;i&#x3002; &#x7576;Base&#x5EFA;&#x69CB;&#x5B50;&#x547C;&#x53EB;add(1)&#x5B8C;&#x7562;&#xFF0C;&#x6B64;&#x6642;Extension&#x7684;i&#x70BA;2&#x3002; &#x63A5;&#x8457;&#x547C;&#x53EB;Extension&#x7684;&#x5EFA;&#x69CB;&#x5B50;&#xFF0C;&#x6B64;&#x6642;&#x6703;&#x5148;&#x521D;&#x59CB;&#x5316;field&#x8B8A;&#x6578;&#xFF0C;&#x6240;&#x4EE5;i&#x6703;&#x88AB;&#x91CD;&#x8A2D;&#x70BA;3&#x3002; &#x4E4B;&#x5F8C;&#x662F;&#x547C;&#x53EB;add(2)&#xFF0C;&#x6B64;&#x6642;i&#x70BA;7&#x3002;Extension&#x7684;&#x521D;&#x59CB;&#x5316;&#x5B8C;&#x7562;&#x3002; &#x547C;&#x53EB;add(8)&#x6642;&#xFF0C;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;i = 7 +16 = 23&#xFF0C;&#x6240;&#x4EE5;&#x5370;&#x51FA;23&#x3002; &#x5047;&#x5982;&#x5C07;1private static void exec(Extension base) &#x6539;&#x6210;1private static void exec(Base base) &#x7D50;&#x679C;&#x9084;&#x662F;&#x4E00;&#x6A23;&#x55CE;&#xFF1F;&#x7D50;&#x679C;&#x662F;0&#xFF0C;&#x56E0;&#x70BA;&#x6B64;&#x6642;&#x7684;i&#x6307;&#x7684;&#x662F;Base&#x7684;i&#x3002;","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[LeetCode] 56. Merge Intervals","slug":"LeetCode-Merge-Intervals","date":"2016-12-09T09:17:00.000Z","updated":"2018-05-07T10:21:21.322Z","comments":true,"path":"2016/12/09/LeetCode-Merge-Intervals/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/LeetCode-Merge-Intervals/","excerpt":"","text":"QuestionGiven a collection of intervals, merge all overlapping intervals. Example 1: Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]. Example 2: Input: [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considerred overlapping. Soultion&#x9019;&#x984C;&#x7684;&#x4E3B;&#x8981;&#x5728;&#x8003;&#x5982;&#x4F55;&#x5224;&#x65B7;&#x5169;&#x500B;interval&#x70BA;&#x91CD;&#x758A;&#x7684;&#x6F14;&#x7B97;&#x6CD5;&#x3002; &#x600E;&#x9EBC;&#x5224;&#x65B7;&#x5169;&#x500B;interval&#x70BA;&#x91CD;&#x758A;&#xFF1A;1.12i &#xFF1A; |--------|i&apos;&#xFF1A; |-----| 2.12i &#xFF1A; |--------|i&apos;&#xFF1A; |-----| 3.12i &#xFF1A; |--------|i&apos;&#xFF1A; |-----| 4.12i &#xFF1A; |--------|i&apos;&#xFF1A; |--------------| &#x4EE5;&#x4E0A;&#x70BA;&#x5169;&#x500B;interval&#x91CD;&#x758A;&#x7684;&#x60C5;&#x6CC1;&#xFF0C;&#x53EF;&#x4EE5;&#x6B78;&#x7D0D;&#x51FA;&#x4EE5;&#x4E0B;&#x60C5;&#x6CC1;&#xFF1A; i.start &lt;= i&apos;.end i&apos;.start &lt;= i.end &#x77E5;&#x9053;&#x4E0A;&#x8FF0;&#x898F;&#x5247;&#x5F8C;&#x5408;&#x4F75;&#x5C31;&#x8B8A;&#x5F97;&#x5F88;&#x7C21;&#x55AE;&#xFF0C;&#x56E0;&#x70BA;&#x7D66;&#x5B9A;&#x7684;&#x9663;&#x5217;&#x662F;&#x6C92;&#x6709;&#x6392;&#x5E8F;&#x904E;&#x7684;&#xFF0C;&#x5148;&#x4F9D;&#x7167; interval.start &#x6392;&#x5E8F;&#x3002; &#x521D;&#x59CB;&#x5316; merge = interval.get(0) &#x4F9D;&#x5E8F;&#x6AA2;&#x67E5; interval.get(i) &#x662F;&#x5426;&#x548C; merge &#x91CD;&#x758A; &#x82E5;&#x91CD;&#x758A;&#xFF0C;merge = &#x5408;&#x4F75; interval.get(i) &#x548C; merge &#x82E5;&#x4E0D;&#x91CD;&#x758A;&#xFF0C;&#x628A; merge &#x5BEB;&#x5165;&#x5230;&#x7D50;&#x679C;&#xFF0C;merge = interval.get(i) &#x6709;&#x9EDE;&#x50CF;&#x8CAA;&#x98DF;&#x86C7;&#xFF0C;&#x5C31;&#x4E00;&#x76F4;&#x5403;&#x76F4;&#x5230;&#x4E0D;&#x80FD;&#x5403;&#x70BA;&#x6B62;&#x3002; 123456789101112131415161718192021222324252627public List&lt;Interval&gt; merge(List&lt;Interval&gt; intervals) { List&lt;Interval&gt; result = new ArrayList&lt;&gt;(); if (intervals.size() == 0 || intervals.size() == 1) return intervals; intervals.sort(Comparator.comparingInt(o -&gt; o.start)); Interval merge = intervals.get(0); for (int i = 1; i &lt; intervals.size(); i++) { if (isOverlap(merge, intervals.get(i))) { merge = new Interval( Math.min(merge.start, intervals.get(i).start), Math.max(merge.end, intervals.get(i).end)); } else { result.add(merge); merge = intervals.get(i); } } result.add(merge); return result;}private boolean isOverlap(Interval interval1, Interval interval2) { return interval1.start &lt;= interval2.end &amp;&amp; interval2.start &lt;= interval1.end;}","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://pandaforme.github.io/categories/LeetCode/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://pandaforme.github.io/tags/Algorithm/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://pandaforme.github.io/tags/LeetCode/"}]},{"title":"[Java] lock、tryLock和lockInterruptibly的差別","slug":"Java-lock、tryLock和lockInterruptibly的差別","date":"2016-12-09T09:16:50.000Z","updated":"2016-12-13T07:24:30.000Z","comments":true,"path":"2016/12/09/Java-lock、tryLock和lockInterruptibly的差別/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-lock、tryLock和lockInterruptibly的差別/","excerpt":"","text":"&#x5728;Java&#x4E2D;&#x7684;Lock&#x4ECB;&#x9762;&#x6709;lock&#x3001;tryLock&#x548C;lockInterruptibly&#x4E09;&#x500B;&#x529F;&#x80FD;&#x5F88;&#x76F8;&#x8FD1;&#x7684;method&#xFF0C;&#x770B;&#x5B8C;javadoc&#x5F8C;&#x9084;&#x662F;&#x641E;&#x4E0D;&#x592A;&#x6E05;&#x695A;&#x5B83;&#x5011;&#x4E4B;&#x9593;&#x7684;&#x5DEE;&#x7570;&#x6027;&#xFF0C;&#x7D42;&#x65BC;&#x627E;&#x5230;&#x4E00;&#x7BC7;&#x89E3;&#x91CB;&#x6E05;&#x695A;&#x7684;&#x6587;&#x7AE0;&#x4E86;&#x3002; lock()&#xFF1A;&#x82E5;lock&#x88AB;thread A&#x53D6;&#x5F97;&#xFF0C;thread B&#x6703;&#x9032;&#x5165;block&#x72C0;&#x614B;&#xFF0C;&#x76F4;&#x5230;&#x53D6;&#x5F97;lock&#x3002; tryLock()&#xFF1A;&#x82E5;&#x7576;&#x4E0B;&#x4E0D;&#x80FD;&#x53D6;&#x5F97;lock&#xFF0C;thread&#x5C31;&#x6703;&#x653E;&#x68C4;&#x3002; lockInterruptibly()&#xFF1A;&#x8DDF;lock()&#x60C5;&#x6CC1;&#x4E00;&#x4E0B;&#xFF0C;&#x4F46;&#x662F;thread B&#x53EF;&#x4EE5;&#x900F;&#x904E;interrupt&#x88AB;&#x559A;&#x9192;&#x8655;&#x7406;InterruptedException&#x3002; &#x7BC4;&#x4F8B;&#xFF1A; lock()&#xFF1A; 1234567891011121314151617181920212223242526import java.util.Date;import java.util.concurrent.locks.ReentrantLock;public class LockDemo { private final ReentrantLock lock; public LockDemo() { lock = new ReentrantLock(); } public static void main(String[] args) throws InterruptedException { LockDemo lockDemo = new LockDemo(); Runnable runnable = new Runnable() { @Override public void run() { lockDemo.lock.lock(); System.out.println(String.format(&quot;%s %s locked&quot;, new Date(System.currentTimeMillis()), Thread.currentThread().getName())); } }; Thread threadA = new Thread(runnable, &quot;Thread A&quot;); Thread threadB = new Thread(runnable, &quot;Thread B&quot;); threadA.start(); threadB.start(); }} &#x53EF;&#x4EE5;&#x767C;&#x73FE;ThreadB&#x5448;&#x73FE;block&#x72C0;&#x614B;&#xFF0C;&#x4E00;&#x76F4;&#x5728;&#x7B49;&#x5F85;Thread A&#x91CB;&#x653E;lock&#x3002; tryLock()&#xFF1A; 123456789101112131415161718192021222324252627import java.util.Date;import java.util.concurrent.locks.ReentrantLock;public class TryLockDemo { private final ReentrantLock lock; public TryLockDemo() { lock = new ReentrantLock(); } public static void main(String[] args) throws InterruptedException { TryLockDemo lockDemo = new TryLockDemo(); Runnable runnable = new Runnable() { @Override public void run() { if (lockDemo.lock.tryLock()) { System.out.println(String.format(&quot;%s %s locked&quot;, new Date(System.currentTimeMillis()), Thread.currentThread().getName())); } } }; Thread threadA = new Thread(runnable, &quot;Thread A&quot;); Thread threadB = new Thread(runnable, &quot;Thread B&quot;); threadA.start(); threadB.start(); }} &#x82E5;&#x4E00;&#x958B;&#x59CB;lock&#x88AB;Thread A&#x53D6;&#x5F97;&#xFF0C;Thread B&#x900F;&#x904E;tryLock()&#x7576;&#x4E0B;&#x82E5;&#x6C92;&#x6709;&#x53D6;&#x5F97;&#x5230;lock&#xFF0C;&#x5C31;&#x6703;&#x653E;&#x68C4;&#x3002; lockInterruptibly()&#xFF1A; 12345678910111213141516171819202122232425262728293031323334import java.util.Date;import java.util.concurrent.locks.ReentrantLock;public class LockInterruptiblyDemo { private final ReentrantLock lock; public LockInterruptiblyDemo() { lock = new ReentrantLock(); } public static void main(String[] args) throws InterruptedException { LockInterruptiblyDemo lockDemo = new LockInterruptiblyDemo(); Runnable runnable = new Runnable() { @Override public void run() { try { lockDemo.lock.lockInterruptibly(); System.out.println(String.format(&quot;%s %s locked&quot;, new Date(System.currentTimeMillis()), Thread.currentThread().getName())); } catch (InterruptedException e) { System.out.println(String.format(&quot;%s %s interrupted&quot;, new Date(System.currentTimeMillis()), Thread.currentThread().getName())); } } }; Thread threadA = new Thread(runnable, &quot;Thread A&quot;); Thread threadB = new Thread(runnable, &quot;Thread B&quot;); threadA.start(); Thread.sleep(1000); threadB.start(); threadB.interrupt(); }} Thread A&#x5148;&#x53D6;&#x5F97;lock&#xFF0C;Thread B&#x7121;&#x6CD5;&#x53D6;&#x5F97;lock&#x9032;&#x5165;block&#x72C0;&#x614B;&#xFF0C;&#x53EF;&#x4EE5;&#x900F;&#x904E;&#x767C;&#x51FA;interrupt&#x65B9;&#x5F0F;&#x559A;&#x9192;Thread B&#x3002; Lock&#x548C;synchronized&#x5E7E;&#x4E4E;&#x662F;&#x5927;&#x540C;&#x5C0F;&#x7570;&#xFF0C;&#x4F46;&#x662F;Lock&#x53EF;&#x4EE5;&#x505A;&#x66F4;&#x7D30;&#x5FAE;&#x7684;&#x540C;&#x6B65;&#x65B9;&#x5F0F;&#x3002; &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A;&#x7528;&#x901A;&#x4FD7;&#x7684;&#x8A9E;&#x8A00;&#x8AAA;&#x8AAA;lock&#x548C;lockInterruptibly&#x7684;&#x5340;&#x5225;","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[Java] Semaphore的使用時機","slug":"Java-Semaphore的使用時機","date":"2016-12-09T09:15:16.000Z","updated":"2016-12-13T07:25:14.000Z","comments":true,"path":"2016/12/09/Java-Semaphore的使用時機/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-Semaphore的使用時機/","excerpt":"","text":"Java&#x6240;&#x63D0;&#x4F9B;&#x7684;Semaphore&#x8DDF;Operating System Concepts&#x4E0A;&#x6240;&#x8B1B;&#x7684;Semaphore&#x4E00;&#x6A23;&#x3002; &#x53EF;&#x4EE5;&#x7528;&#x5B83;&#x4F86;&#x89E3;&#x6C7A;&#xFF1A; Producer and Consumer Problem The Readers-Writers Problem The Dining-Philosophers Problem Pool&#x7684;&#x5BE6;&#x4F5C; &#x63A7;&#x5236;critical region ####&#x7BC4;&#x4F8B;&#xFF1A;12345678910111213141516171819202122232425262728293031323334353637383940import java.util.concurrent.Semaphore;public class SemaphoreDemo { Semaphore pool = new Semaphore(10); public static void main(String args[]) { final SemaphoreDemo demo = new SemaphoreDemo(); for (int i = 0; i &lt; 30; i++) { new Thread(new Runnable() { @Override public void run() { demo.mutualExclusion(); } }, &quot;Thread&quot; + i).start(); } } private void mutualExclusion() { try { pool.acquire(); System.out.println(Thread.currentThread().getName() + &quot; inside mutual exclusive region&quot;); Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } finally { pool.release(); System.out.println(Thread.currentThread().getName() + &quot; outside of mutual exclusive region&quot;); } }} &#x7576;pool&#x70BA;&#x7A7A;&#x7684;&#x6642;&#x5019;&#xFF0C;&#x60F3;&#x8981;&#x4F7F;&#x7528;pool&#x8CC7;&#x6E90;&#x7684;thread&#x6703;&#x9032;&#x5165;blocking&#x72C0;&#x614B;&#xFF0C;&#x76F4;&#x5230;&#x6709;&#x5176;&#x4ED6;thread&#x57F7;&#x884C;release()&#x91CB;&#x653E;pool&#x8CC7;&#x6E90;&#xFF0C;&#x559A;&#x9192;&#x5176;&#x4E2D;&#x5728;blocking&#x72C0;&#x614B;&#x7684;thread&#x3002; &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A;Counting Semaphore Example in Java 5 &#x2013; Concurrency Tutorial","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[Java] Difference between synchronized vs ReentrantLock","slug":"Java-Difference-between-synchronized-vs-ReentrantLock","date":"2016-12-09T09:15:00.000Z","updated":"2016-12-09T09:16:27.000Z","comments":true,"path":"2016/12/09/Java-Difference-between-synchronized-vs-ReentrantLock/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-Difference-between-synchronized-vs-ReentrantLock/","excerpt":"","text":"&#x6839;&#x64DA;&#x53C3;&#x8003;&#x8CC7;&#x6599;&#x6574;&#x7406;&#x4E86;ReentrantLock&#x548C;synchronized&#x7684;&#x6BD4;&#x8F03;&#x8868;&#xFF1A; ReentrantLock synchronized &#x9396;&#x5B9A;&#x5C0D;&#x8C61; &#x7531;current thread&#x6C7A;&#x5B9A;&#x3002;&#x5047;&#x5982;lock&#x662F;Thread A&#x4E0A;&#x9396;&#xFF0C;&#x53EA;&#x80FD;&#x7531;Thread A&#x89E3;&#x958B;&#x3002; Object&#x6216;&#x662F;Class &#x529F;&#x80FD; fairness tryLock lockInterruptibly &#x5176;&#x4ED6;&#x529F;&#x80FD; &#x53EA;&#x80FD;&#x4E00;&#x76F4;&#x7B49;&#x5F85;&#xFF0C;&#x76F4;&#x5230;&#x53D6;&#x5F97;lock lock&#x7684;&#x9396;&#x5B9A;&#x548C;&#x91CB;&#x653E; &#x7531;&#x7A0B;&#x5F0F;&#x8A2D;&#x8A08;&#x5E2B;&#x63A7;&#x5236;&#x3002; &#x6703;&#x81EA;&#x52D5;&#x63A7;&#x7BA1;lock&#x7684;&#x4E0A;&#x9396;&#x548C;&#x91CB;&#x653E;&#x3002; ReentrantLock&#x7684;&#x63A7;&#x5236;&#x7A0B;&#x5EA6;&#x6BD4;&#x8F03;&#x5927;&#xFF0C;synchronized&#x7684;&#x63A7;&#x5236;&#x7A0B;&#x5EA6;&#x6BD4;&#x8F03;&#x5C0F;&#x3002; &#x6B63;&#x78BA;&#x4F7F;&#x7528;&#x7684;&#x60C5;&#x6CC1;&#x4E0B;&#xFF0C;&#x4F7F;&#x7528;ReentrantLock&#x6703;&#x6BD4;&#x4F7F;&#x7528;synchronized&#x7684;&#x6548;&#x80FD;&#x8F03;&#x597D;&#x3002; &#x82E5;&#x5C0D;&#x540C;&#x6B65;&#x554F;&#x984C;&#x4E0D;&#x719F;&#x6089;&#xFF0C;&#x9396;&#x5B9A;&#x548C;&#x91CB;&#x653E;ReentrantLock&#x7684;&#x9806;&#x5E8F;&#x4E0D;&#x5C0D;&#x5BB9;&#x6613;&#x9020;&#x6210;deadlock&#x3002; &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A;ReentrantLock Example in Java, Difference between synchronized vs ReentrantLock","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[Java] ThreadLocal","slug":"Java-ThreadLocal","date":"2016-12-09T09:13:00.000Z","updated":"2016-12-13T07:24:41.000Z","comments":true,"path":"2016/12/09/Java-ThreadLocal/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-ThreadLocal/","excerpt":"","text":"&#x7576;&#x591A;&#x500B;thread&#x5171;&#x4EAB;&#x67D0;&#x4E9B;&#x8B8A;&#x6578;&#xFF0C;&#x53EF;&#x4EE5;&#x900F;&#x904E;synchronized&#x6216;&#x662F;lock&#x4F86;&#x4FDD;&#x8B77;&#x5171;&#x4EAB;&#x8B8A;&#x6578;&#xFF0C;&#x907F;&#x514D;&#x7522;&#x751F;race condition&#x554F;&#x984C;&#x3002;&#x9019;&#x6A23;&#x7684;&#x4F5C;&#x6CD5;&#x5B89;&#x5168;&#x4F46;&#x662F;&#x6548;&#x80FD;&#x6703;&#x8B8A;&#x6162;&#xFF0C;&#x662F;&#x4EE5;&#x6642;&#x9593;&#x63DB;&#x7A7A;&#x9593;&#x7684;&#x65B9;&#x6CD5;&#x3002; &#x5C07;&#x5171;&#x4EAB;&#x8B8A;&#x6578;&#x5404;&#x8907;&#x88FD;&#x4E00;&#x4EFD;&#x7D66;thread&#xFF0C;&#x9019;&#x6A23;&#x65E2;&#x9054;&#x5B89;&#x5168;&#x6027;&#x4E26;&#x4E14;&#x63D0;&#x5347;&#x6548;&#x80FD;&#xFF0C;&#x662F;&#x4EE5;&#x7A7A;&#x9593;&#x63DB;&#x6642;&#x9593;&#x7684;&#x65B9;&#x6CD5;&#x3002;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;ThreadLocal&#x4F86;&#x9054;&#x5230;&#x9019;&#x6A23;&#x7684;&#x6548;&#x679C;&#x3002; &#x4F8B;&#x5982;&#xFF1A; &#x591A;&#x500B;thread&#x5171;&#x4EAB;SimpleDateForamt&#x8B8A;&#x6578;&#xFF0C;&#x56E0;&#x70BA;SimpleDateForamt&#x4E0D;&#x662F;ThreadSafe&#xFF0C;&#x56E0;&#x6B64;&#x6703;&#x6709;&#x540C;&#x6B65;&#x554F;&#x984C;&#x3002;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;ThreadLocal&#x89E3;&#x6C7A;&#x3002; Database connection pool&#x4E2D;&#x7684;thread&#x6703;&#x5171;&#x4EAB;&#x67D0;&#x4E9B;&#x8B8A;&#x6578;&#xFF0C;&#x5047;&#x5982;&#x900F;&#x904E;lock&#x65B9;&#x5F0F;&#x907F;&#x514D;&#x540C;&#x6B65;&#x554F;&#x984C;&#x767C;&#x751F;&#xFF0C;&#x4F46;&#x6703;&#x5C0E;&#x81F4;&#x6548;&#x80FD;&#x8F03;&#x5DEE;&#x3002;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;ThreadLocal&#x89E3;&#x6C7A;&#xFF0C;&#x4EE5;&#x7A7A;&#x9593;&#x4F86;&#x63DB;&#x53D6;&#x6642;&#x9593;&#x3002; Java Application Server&#x5229;&#x7528;ThreadLocal&#x7BA1;&#x7406;transaction&#x548C;security&#x8CC7;&#x8A0A;&#x3002; &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; Design Pattern: Thread-Specific Storage &#x6A21;&#x5F0F; ThreadLocal in Java - Example Program and Tutorial Java Thread Local &#x2013; How to Use and Code Sample","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"Find running median from a stream of integers","slug":"Find-running-median-from-a-stream-of-integers","date":"2016-12-09T09:11:00.000Z","updated":"2016-12-09T09:12:37.000Z","comments":true,"path":"2016/12/09/Find-running-median-from-a-stream-of-integers/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Find-running-median-from-a-stream-of-integers/","excerpt":"","text":"&#x4F9D;&#x5E8F;&#x8F38;&#x5165;&#x591A;&#x500B;&#x6578;&#x5B57;&#xFF0C;&#x5982;&#x4F55;&#x6709;&#x6548;&#x7387;&#x627E;&#x51FA;&#x4E2D;&#x4F4D;&#x6578;(median)&#xFF1F; &#x4F8B;&#x5982;&#xFF1A;&#x4F9D;&#x5E8F;&#x8F38;&#x5165;7&#x3001;13&#x3001;2&#x3001;6&#x3001;9&#xFF0C;&#x4E2D;&#x4F4D;&#x6578;&#x70BA;7&#x3002; &#x89E3;&#x6CD5;&#xFF1A; &#x5C07;&#x6240;&#x6709;&#x6578;&#x5B57;&#x6392;&#x5E8F;&#xFF0C;&#x5373;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;&#x4E2D;&#x4F4D;&#x6578;&#x3002;&#x6642;&#x9593;&#x8907;&#x96DC;&#x5EA6;&#x70BA;$O(nlogn)$ &#x5229;&#x7528;max heap&#x548C;min heap&#xFF1A; &#x65B0;&#x589E;&#x6578;&#x5B57;&#x5230;heap&#xFF1A; &#x82E5;max heap&#x70BA;&#x7A7A;&#xFF0C;&#x6578;&#x5B57;&#x65B0;&#x589E;&#x5230;min heap&#x3002; &#x82E5;max heap&#x4E0D;&#x70BA;&#x7A7A;&#x4E26;&#x4E14;&#x6578;&#x5B57;&#x5C0F;&#x65BC;max heap&#x7684;root&#xFF0C;&#x6578;&#x5B57;&#x65B0;&#x589E;&#x5230;max heap&#x3002; &#x82E5;max heap&#x4E0D;&#x70BA;&#x7A7A;&#x4E26;&#x4E14;&#x6578;&#x5B57;&#x5927;&#x65BC;max heap&#x7684;root&#xFF0C;&#x6578;&#x5B57;&#x65B0;&#x589E;&#x5230;min heap&#x3002; rebalance&#xFF1A; &#x82E5;max heap size - min heap size &gt; 1, &#x522A;&#x9664;max heap&#x7684;root&#x4E26;&#x4E14;&#x65B0;&#x589E;&#x5230;min heap&#x3002; &#x82E5;min heap size - max heap size &gt; 1, &#x522A;&#x9664;min heap&#x7684;root&#x4E26;&#x4E14;&#x65B0;&#x589E;&#x5230;max heap&#x3002; &#x8A08;&#x7B97;&#x4E2D;&#x4F4D;&#x6578;&#xFF1A; &#x82E5;max heap size &gt; min heap size&#xFF0C;&#x4E2D;&#x4F4D;&#x6578;&#x70BA;max heap&#x7684;root&#x3002; &#x82E5;max heap size &lt; min heap size&#xFF0C;&#x4E2D;&#x4F4D;&#x6578;&#x70BA;min heap&#x7684;root&#x3002; &#x82E5;max heap size == min heap size&#xFF0C;&#x4E2D;&#x4F4D;&#x6578;&#x70BA;$(max\\ heap&#x7684;root + min\\ heap&#x7684;root) / 2$ (&#x6839;&#x64DA;&#x5B9A;&#x7FA9;&#x6C7A;&#x5B9A;)&#x3002; &#x6642;&#x9593;&#x8907;&#x96DC;&#x5EA6;&#x70BA;$O(1)$ &#x6B64;&#x65B9;&#x6CD5;&#x662F;&#x5229;&#x7528;&#x4E2D;&#x4F4D;&#x6578;&#x7684;&#x7279;&#x6027;&#xFF1A; &#x5DE6;&#x534A;&#x90E8;&#x7684;&#x6578;&#x5B57;&#x4E00;&#x5B9A;&#x5C0F;&#x90E8;&#x53F3;&#x534A;&#x908A;&#x3002; &#x4F8B;&#x5982;&#xFF1A;2&#x3001;3&#x3001;7&#x3001;13&#x3001;15 &#x6216;&#x662F;2&#x3001;3&#x3001;7&#x3001;13&#x3001;15 &#x5DE6;&#x534A;&#x90E8;&#x548C;&#x53F3;&#x534A;&#x90E8;&#x7684;&#x5927;&#x5C0F;&#x5DEE;&#x503C;&#x4E0D;&#x80FD;&#x8D85;&#x904E;1&#xFF0C;&#x5426;&#x5247;&#x4E0D;&#x80FD;&#x900F;&#x904E;&#x4E0A;&#x8FF0;&#x65B9;&#x6CD5;&#x627E;&#x51FA;&#x4E2D;&#x4F4D;&#x6578;&#x3002; &#x5DE6;&#x534A;&#x90E8;&#x7684;&#x6578;&#x5B57;(&#x5305;&#x542B;&#x4E2D;&#x4F4D;&#x6578;)&#x5EFA;&#x6210;max heap&#xFF0C;max heap&#x7684;root&#x5373;&#x70BA;&#x4E2D;&#x4F4D;&#x6578;&#x3002; &#x4F8B;&#x5982;&#xFF1A;2&#x3001;3&#x3001;7&#x3001;13&#x3001;15 2&#x3001;3&#x3001;7&#x5EFA;&#x6210;max heap&#xFF0C;13&#x3001;15&#x5EFA;&#x6210;min heap &#x53F3;&#x534A;&#x90E8;&#x7684;&#x6578;&#x5B57;(&#x5305;&#x542B;&#x4E2D;&#x4F4D;&#x6578;)&#x5EFA;&#x6210;min heap&#xFF0C;min heap&#x7684;root&#x5373;&#x70BA;&#x4E2D;&#x4F4D;&#x6578;&#x3002; &#x4F8B;&#x5982;&#xFF1A;2&#x3001;3&#x3001;7&#x3001;13&#x3001;15 2&#x3001;3&#x5EFA;&#x6210;max heap&#xFF0C;7&#x3001;13&#x3001;15&#x5EFA;&#x6210;min heap &#x7A0B;&#x5F0F;&#x78BC;&#xFF1A;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374import java.util.Collections;import java.util.Comparator;import java.util.LinkedList;import java.util.PriorityQueue;import java.util.Queue;public class FindMedian&lt;E&gt; { private Queue&lt;E&gt; queue; private Queue&lt;E&gt; maxHeap; private Queue&lt;E&gt; minHeap; private Comparator&lt;E&gt; comparator; public FindMedian(Comparator&lt;E&gt; comparator) { queue = new LinkedList&lt;&gt;(); maxHeap = new PriorityQueue&lt;&gt;(Collections.reverseOrder(comparator)); minHeap = new PriorityQueue&lt;&gt;(comparator); this.comparator = comparator; } public void enqueue(E e) { if (e == null) throw new IllegalArgumentException(); this.queue.add(e); addElementToHeap(e); rebalance(); } public E dequeue() { E removeObject = this.queue.remove(); this.maxHeap.remove(removeObject); this.minHeap.remove(removeObject); return removeObject; } public E peekMedian() { if (maxHeap.size() == minHeap.size()) { // Depends on definition return maxHeap.peek(); } else if (maxHeap.size() &gt; minHeap.size()) { return maxHeap.peek(); } else { return minHeap.peek(); } } private void addElementToHeap(E e) { E tmp = maxHeap.peek(); if (tmp == null) { minHeap.add(e); } else if (comparator.compare(tmp, e) &gt; 0) { maxHeap.add(e); } else { minHeap.add(e); } } private void rebalance() { int sizeDiff = maxHeap.size() - minHeap.size(); if (sizeDiff &gt; 1) { minHeap.add(maxHeap.remove()); } else if (sizeDiff &lt; -1) { maxHeap.add(minHeap.remove()); } }} FindMedian &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A;Find running median from a stream of integers","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://pandaforme.github.io/categories/Algorithm/"}],"tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://pandaforme.github.io/tags/Algorithm/"}]},{"title":"[Java] How do I switch between Java8, Java 7 and Java 6 on OS X","slug":"OS-X-How-do-I-switch-between-Java-7-and-Java-6","date":"2016-12-09T09:04:41.000Z","updated":"2016-12-13T07:17:41.000Z","comments":true,"path":"2016/12/09/OS-X-How-do-I-switch-between-Java-7-and-Java-6/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/OS-X-How-do-I-switch-between-Java-7-and-Java-6/","excerpt":"","text":"&#x89E3;&#x6C7A;&#x65B9;&#x6CD5;&#xFF1A;&#x5C07;&#x4EE5;&#x4E0B;&#x7A0B;&#x5F0F;&#x78BC;&#x52A0;&#x5165;&#x5230;.bash_profile123456789101112131415function setjdk() { if [ $# -ne 0 ]; then removeFromPath &apos;/System/Library/Frameworks/JavaVM.framework/Home/bin&apos; if [ -n &quot;${JAVA_HOME+x}&quot; ]; then removeFromPath $JAVA_HOME fi export JAVA_HOME=`/usr/libexec/java_home -v $@` export PATH=$JAVA_HOME/bin:$PATH fi echo JAVA_HOME set to $JAVA_HOME java -version } function removeFromPath() { export PATH=$(echo $PATH | sed -E -e &quot;s;:$1;;&quot; -e &quot;s;$1:?;;&quot;) } &#x4F7F;&#x7528;&#x65B9;&#x5F0F;&#xFF1A;1setjdk 1.8 &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A;How do I switch between Java 7 andJava 6 on OS X 10.8.2?","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[Java] Test Java mail by GreenMail","slug":"Java-Test-Java-mail-by-GreenMail","date":"2016-12-09T09:03:19.000Z","updated":"2016-12-13T07:25:03.000Z","comments":true,"path":"2016/12/09/Java-Test-Java-mail-by-GreenMail/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Java-Test-Java-mail-by-GreenMail/","excerpt":"","text":"&#x8981;&#x5982;&#x4F55;&#x5C0D;JavaMail-API&#x505A;&#x55AE;&#x5143;&#x6E2C;&#x8A66;&#x5462;? &#x5728;Stack Overflow&#x4E0A;&#x4E0D;&#x5C11;&#x4EBA;&#x63A8;&#x85A6; GreenMail&#xFF0C;GreenMail&#x652F;&#x63F4;SMTP, POP3, IMAP&#xFF0C;&#x53EF;&#x4EE5;&#x5C0D;sender&#x548C;receiver&#x9032;&#x884C;&#x6E2C;&#x8A66;&#xFF0C;&#x5C31;&#x4F86;&#x8A66;&#x7528;&#x770B;&#x770B;&#x3002; Sender12345678910111213141516171819202122232425262728293031323334353637383940414243public class MailSenderTest { private GreenMail greenMail; private MimeMessage message; @Before public void setUp() throws Exception { greenMail = new GreenMail(ServerSetupTest.SMTP); greenMail.start(); Properties properties = System.getProperties(); properties.put(&quot;mail.smtp.host&quot;, &quot;localhost&quot;); properties.put(&quot;mail.smtp.port&quot;, ServerSetupTest.SMTP.getPort()); Session session = Session.getInstance(properties); message = new MimeMessage(session); message.setFrom(new InternetAddress(&quot;test@test.com&quot;)); message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(&quot;test1@test.com&quot;, false)); message.setSubject(&quot;subject&quot;); message.setText(&quot;text&quot;); message.setSentDate(new Date()); } @After public void tearDown() throws Exception { greenMail.stop(); } @Test public void testSend() throws Exception { // [Start] Replace this with your send code // Sender.send(message); // [End] MimeMessage[] messages = greenMail.getReceivedMessages(); Assert.assertNotNull(messages); Assert.assertEquals(1, messages.length); MimeMessage m = messages[0]; Assert.assertEquals(&quot;subject&quot;, m.getSubject()); Assert.assertTrue(String.valueOf(m.getContent()).contains(&quot;text&quot;)); Assert.assertEquals(&quot;test@test.com&quot;, m.getFrom()[0].toString()); }} Receiver12345678910111213141516171819202122232425262728293031323334public class MailReceiverTest { private GreenMail greenMail; private String subject; private String body; @Before public void setUp() throws Exception { greenMail = new GreenMail(ServerSetupTest.SMTP); greenMail.start(); subject = GreenMailUtil.random(); body = GreenMailUtil.random(); GreenMailUtil.sendTextEmailTest(&quot;test@localhost.com&quot;, &quot;test1@localhost.com&quot;, subject, body); } @After public void tearDown() throws Exception { greenMail.stop(); } @Test public void testReceiver() throws Exception { // [Start] Replace this with your receive code // Message message = Receiver.receive(); // [End] Assert.assertNotNull(message); Assert.assertEquals(message.getTo(), &quot;test@localhost.com&quot;); Assert.assertEquals(message.getFrom(), &quot;test1@localhost.com&quot;); Assert.assertEquals(message.getSubject(), subject); Assert.assertEquals(message.getBody(), body); }} &#x4F7F;&#x7528;GreenMail&#x9032;&#x884C;&#x6E2C;&#x8A66;&#xFF0C;&#x56B4;&#x683C;&#x4F86;&#x8AAA;&#x4E26;&#x4E0D;&#x5C6C;&#x65BC;unit test&#xFF0C;&#x67D0;&#x7A2E;&#x7A0B;&#x5EA6;&#x4F86;&#x8AAA;&#x5B83;&#x4E5F;&#x662F;&#x5C6C;&#x65BC;mail server&#xFF0C;&#x5426;&#x5247;&#x5C31;&#x5FC5;&#x9808;mock Transport&#x548C;Session&#x3002;&#x662F;&#x5426;&#x80FD;&#x900F;&#x904E;mock Transport&#x548C;Session&#x4F86;&#x9054;&#x5230;&#x6E2C;&#x8A66;&#x6548;&#x679C;&#xFF0C;&#x9019;&#x8DDF;&#x4F60;&#x7684;mail class&#x8A2D;&#x8A08;&#x6709;&#x95DC;&#x3002;&#x4EE5;&#x5BE6;&#x7528;&#x6027;&#x3001;&#x65B9;&#x4FBF;&#x6027;&#x548C;&#x529F;&#x80FD;&#x6027;&#xFF0C;GreenMail&#x7B97;&#x662F;&#x4E00;&#x500B;&#x4E0D;&#x932F;&#x6E2C;&#x8A66;mail&#x7684;framework&#x3002; &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; GreenMail Integration Testing IMAP, SMTP and POP3 with GreenMail How to test&#x2026; Java Mail","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"}]},{"title":"[LOGBack] \"hidden\" cost of parameter construction","slug":"LOGBack-hidden-cost-of-parameter-construction","date":"2016-12-09T09:02:11.000Z","updated":"2016-12-13T07:28:19.000Z","comments":true,"path":"2016/12/09/LOGBack-hidden-cost-of-parameter-construction/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/LOGBack-hidden-cost-of-parameter-construction/","excerpt":"","text":"&#x4EE5;&#x5F80;&#x5BEB;&#x7A0B;&#x5F0F;&#x7684;&#x6642;&#x5019;&#xFF0C;&#x5C0D;&#x65BC;log&#x7684;&#x4F7F;&#x7528;&#x901A;&#x5E38;&#x50CF;&#x9019;&#x6A23;&#xFF1A;1logger.debug(&quot;The new entry is &quot;+entry+&quot;.&quot;); &#x4F46;&#x662F;&#x9019;&#x6A23;&#x7684;&#x505A;&#x6CD5;&#x6703;&#x6709;&#x6548;&#x80FD;&#x5F71;&#x97FF;&#x3002;&#x4E0D;&#x7BA1;log debug&#x6A21;&#x5F0F;&#x662F;&#x5426;&#x6709;&#x6253;&#x958B;&#xFF0C;&#x90FD;&#x6703;&#x5C07;&quot;The new entry is &quot;+entry+&quot;.&quot;&#x8F49;&#x6210;&#x5B57;&#x4E32;&#x3002; &#x7576;entry&#x662F;&#x4E00;&#x500B;&#x5F88;&#x5927;&#x7684;&#x7269;&#x4EF6;&#xFF0C;&#x4E14;&#x5728;production&#x74B0;&#x5883;&#xFF08;log debug&#x6A21;&#x5F0F;&#x662F;&#x95DC;&#x9589;&#xFF09;&#xFF0C;&#x5F88;&#x6709;&#x53EF;&#x80FD;&#x9020;&#x6210;&#x6548;&#x80FD;&#x4F4E;&#x843D;&#x3002; &#x8F03;&#x597D;&#x7684;&#x4F5C;&#x6CD5;&#x5982;&#x4E0B;&#xFF08;&#x53EA;&#x6709;&#x5728;log debug&#x6A21;&#x5F0F;&#x662F;&#x6253;&#x958B;&#x7684;&#x6642;&#x5019;&#xFF0C;&#x624D;&#x6703;&#x5C07;&quot;The new entry is &quot;+entry+&quot;.&quot;&#x8F49;&#x6210;&#x5B57;&#x4E32;&#xFF09;&#xFF1A;1logger.debug(&quot;The new entry is {}.&quot;, entry); &#x6709;&#x591A;&#x500B;&#x53C3;&#x6578;&#x7684;&#x6642;&#x5019;&#xFF1A;12Object[] paramArray = {newVal, below, above};logger.debug(&quot;Value {} was inserted between {} and {}.&quot;, paramArray); &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A;http://logback.qos.ch/manual/architecture.html","categories":[{"name":"LOGBack","slug":"LOGBack","permalink":"https://pandaforme.github.io/categories/LOGBack/"}],"tags":[{"name":"LOGBack","slug":"LOGBack","permalink":"https://pandaforme.github.io/tags/LOGBack/"}]},{"title":"[Jersey] RESTful service starter-kit (1)","slug":"Jersey-RESTful-serveice-starter-kit-1","date":"2016-12-09T09:00:13.000Z","updated":"2016-12-13T07:20:04.000Z","comments":true,"path":"2016/12/09/Jersey-RESTful-serveice-starter-kit-1/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Jersey-RESTful-serveice-starter-kit-1/","excerpt":"","text":"JAX-RS&#x6709;&#x63D0;&#x4F9B;&#x985E;&#x4F3C;AOP&#x529F;&#x80FD;&#xFF0C;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x96C6;&#x4E2D;&#x8655;&#x7406;&#x6240;&#x6709;&#x7684;Exception&#x3002; &#x5728;Clean Code&#x8AAA;&#x5230;&#xFF1A; The short chapter seven of &#xAB;Clean Code&#xBB; is dedicated to error handling. The one point it stresses with vigor is:Do not use checked exceptions!The price of checked exceptions is an Open/Closed Principle violation. If you throw a checked exception from a method in your code and the catch is three levels above, you must declare that exception in the signature of each method between you and the catch. This means that a change at a low level of the software can force signature changes on many higher levels.&#x2014;Robert C. Martin, &#xAB;Clean Code&#xBB;, page 107&#x6211;&#x6703;&#x7FD2;&#x6163;&#x5C07;checked exception&#x8F49;&#x6210;runtime exception&#xFF0C;&#x7D71;&#x4E00;&#x96C6;&#x4E2D;&#x8655;&#x7406;&#x3002; &#x4F8B;&#x5982;&#xFF1A;&#x53EA;&#x8981;&#x6C92;&#x6709;&#x8655;&#x7406;&#x5230;&#x7684;exception&#xFF0C;&#x4E00;&#x5F8B;&#x56DE;Internal Server Error &#x53EA;&#x8981;&#x5BE6;&#x4F5C;ExceptionMapper&#xFF0C;&#x9078;&#x64C7;&#x8981;&#x6355;&#x6349;exception&#x653E;&#x5230;generic&#xFF0C;&#x6700;&#x5F8C;&#x518D;&#x52A0;&#x5165;@Provider&#x5C31;&#x53EF;&#x4EE5;&#x7D71;&#x4E00;&#x8655;&#x7406;&#x60F3;&#x8981;&#x8655;&#x7406;&#x7684;Exception&#x3002;1234567891011@Providerpublic class GenericExceptionMapper implements ExceptionMapper&lt;Throwable&gt; { @Override public Response toResponse(Throwable exception) { return Response.status(Response.Status.INTERNAL_SERVER_ERROR) .entity(exception.getMessage()) .type(MediaType.APPLICATION_JSON) .build(); }} Glassfish&#x6709;&#x63D0;&#x4F9B;LoggingFilter&#xFF0C;&#x53EF;&#x4EE5;&#x81EA;&#x52D5;log&#x6BCF;&#x500B;request&#x548C;response&#x3002;&#x5047;&#x5982;&#x5C0D;&#x65BC;&#x8F38;&#x51FA;&#x683C;&#x5F0F;&#x6BD4;&#x8F03;&#x8981;&#x6C42;&#xFF0C;&#x53EF;&#x4EE5;&#x5BE6;&#x4F5C;&#x5C6C;&#x65BC;&#x81EA;&#x5DF1;&#x7684;LoggingFilter&#xFF0C;&#x5BE6;&#x4F5C;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x53C3;&#x8003;LoggingFilter.java&#x3002; &#x4F7F;&#x7528;LoggingFilter&#x53EF;&#x4EE5;&#x5728;web.xml&#x6216;&#x7A0B;&#x5F0F;&#x78BC;&#x4E2D;&#x958B;&#x555F;&#x3002;&#x53EF;&#x4EE5;&#x53C3;&#x8003;Registering Resources and Providers in Jersey 2&#x3002; &#x4F8B;&#x5982;&#xFF1A; client&#x7AEF;&#x767C;&#x51FA;&#xFF1A;http://localhost:8080/jersey-starterkit/hello```123456789101112server&#x7AEF;&#x6703;&#x7D00;&#x9304;&#x76F8;&#x95DC;&#x8CC7;&#x8A0A;&#xFF1A;```bash15:34:40.087 [qtp1671915608-80] INFO application.MyApplication - 3 * Server has received a request on thread qtp1671915608-801 &gt; GET http://localhost:8080/jersey-starterkit/hello1 &gt; Accept: */*1 &gt; Host: localhost:80801 &gt; User-Agent: curl/7.37.115:34:40.091 [qtp1671915608-80] INFO application.MyApplication - 4 * Server responded with a response on thread qtp1671915608-802 &lt; 2002 &lt; Content-Type: application/jsonhello &#x7A0B;&#x5F0F;&#x78BC;&#xFF1A;https://github.com/pandaforme/jersey-starterkit &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; Error handling in REST API with Jersey Testing error handling in RESTful application with jersey and jbehave Registering Resources and Providers in Jersey 2","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"},{"name":"Jersey","slug":"Jersey","permalink":"https://pandaforme.github.io/tags/Jersey/"}]},{"title":"[Scala] Tail recursion","slug":"Scala-Tail-recursion","date":"2016-12-09T08:57:00.000Z","updated":"2017-04-26T11:08:34.000Z","comments":true,"path":"2016/12/09/Scala-Tail-recursion/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Scala-Tail-recursion/","excerpt":"","text":"&#x5728;&#x5B78;&#x7FD2;Functional programming&#x904E;&#x7A0B;&#x4E2D;&#xFF0C;&#x5B78;&#x5230;&#x905E;&#x8FF4;&#x53EF;&#x4EE5;&#x5206;&#x70BA;&#x5169;&#x985E;&#xFF1A; Tail recursion 1If a function calls itself as its last action, the function&#x2019;s stack frame can be reused. This is called tail recursion. Tail call 1If the last action of a function consists of calling a function (which may be the same), one stack frame would be sufficient for both functions. Such calls are called tail-calls. &#x5206;&#x5225;&#x4EE5;&#x8A08;&#x7B97;&#x6700;&#x5927;&#x516C;&#x56E0;&#x6578;(gcd)&#x548C;&#x968E;&#x5C64;(factorial)&#x70BA;&#x4F8B;&#xFF1A; gcd 123456def gcd(a: Int, b: Int): Int = { if (b == 0) a else gcd(b, a % b)} factorial 123456def factorial(n: Int): Int = { if (n == 0) 1 else n * factorial(n - 1)} &#x4F8B;&#x5982;&#xFF1A; 1gcd(21, 14) -&gt; gcd(14, 7) -&gt; gcd(7, 0) -&gt; 7 123456factorial(5) -&gt; 5 * factorial(4) -&gt; 5 * 4 * factorial(3) -&gt; 5 * 4 * 3 * factorial(2) -&gt; 5 * 4 * 3 * 2 * factorial(1) -&gt; 5 * 4 * 3 * 2 * 1 * factorial(0) -&gt; 5 * 4 * 3 * 2 * 1 * 1 &#x53EF;&#x4EE5;&#x767C;&#x73FE;&#xFF1A; &#x5728;gcd&#x7BC4;&#x4F8B;&#x4E2D;&#xFF0C;&#x6BCF;&#x4E00;&#x6B65;&#x4E0D;&#x6703;&#x4F9D;&#x8CF4;&#x4E0A;&#x4E00;&#x6B65;&#x7684;&#x7D50;&#x679C;&#xFF0C;&#x4E0A;&#x4E00;&#x6B65;&#x7684;&#x7D50;&#x679C;&#x662F;&#x4EE5;&#x53C3;&#x6578;&#x65B9;&#x5F0F;&#x50B3;&#x5165;&#x5230;&#x51FD;&#x5F0F;&#x88E1;&#x9762;&#x3002; &#x5728;factorial&#x7BC4;&#x4F8B;&#x4E2D;&#xFF0C;&#x6BCF;&#x4E00;&#x6B65;&#x6703;&#x4F9D;&#x8CF4;&#x4E0A;&#x4E00;&#x6B65;&#x7684;&#x7D50;&#x679C;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981; stack &#x4F86;&#x8A18;&#x9304;&#x6BCF;&#x4E00;&#x6B65;&#x7684;&#x72C0;&#x614B;&#x3002;&#x7B49;&#x8D70;&#x5230;&#x76E1;&#x982D;&#x5F8C;&#xFF0C;&#x518D;&#x53D6;&#x51FA; stack &#x5167;&#x7684;&#x5143;&#x7D20;&#x4E26;&#x4E14;&#x8A08;&#x7B97;&#x4E4B;&#xFF0C;&#x9010;&#x4E00;&#x5408;&#x4F75;&#x7D50;&#x679C;&#x3002; &#x5047;&#x5982;&#x57F7;&#x884C; factorial(100000) &#x53EF;&#x4EE5;&#x9810;&#x671F;&#x6703;&#x767C;&#x751F; stack overflow&#xFF0C;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x5C07;&#x539F;&#x672C;&#x7684;&#x7A0B;&#x5F0F;&#x6539;&#x6210;Tail recursion&#x7248;&#x672C;&#xFF0C;&#x5C31;&#x4E0D;&#x6703;&#x6709; stack overflow &#x767C;&#x751F;&#x3002;&#x5728;Scala&#x4E2D;&#x6703;&#x5C0D;Tail recursion&#x505A;&#x6700;&#x4F73;&#x5316;&#xFF0C;&#x6216;&#x662F;&#x53EF;&#x4EE5;&#x900F;&#x904E; @tailrec &#x6A19;&#x8A3B;&#x6B64;&#x51FD;&#x6578;&#x662F;Tail recursion&#x3002; &#x6E2C;&#x8A66;&#x7BC4;&#x4F8B;&#xFF1A; 123456789101112131415161718192021222324252627282930import java.util.concurrent.TimeUnitimport com.google.common.base.Stopwatchdef factorial(n: Int): Int = { if (n == 0) 1 else n * factorial(n - 1)}def factorialTailrec(n: Int, result: Int): Int = { if (n == 0) result else factorialTailrec(n - 1, n * result)}val sw = Stopwatch.createUnstarted()sw.elapsed(TimeUnit.MILLISECONDS)sw.start()factorial(15)sw.stop()println(sw.toString)sw.reset()sw.start()factorialTailrec(15, 1)sw.stop()println(sw.toString) &#x6E2C;&#x8A66;&#x7D50;&#x679C;&#xFF1A;121.611 ms677.4 &#x3BC;s &#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x4F86;&#x6539;&#x6210;Tail recursion&#x7248;&#x672C;&#x6548;&#x7387;&#x6703;&#x5927;&#x5E45;&#x6539;&#x5584;&#x3002; &#x53C3;&#x8003;: What is tail recursion? Tail recursion","categories":[{"name":"Scala","slug":"Scala","permalink":"https://pandaforme.github.io/categories/Scala/"}],"tags":[{"name":"Scala","slug":"Scala","permalink":"https://pandaforme.github.io/tags/Scala/"},{"name":"Recursion","slug":"Recursion","permalink":"https://pandaforme.github.io/tags/Recursion/"},{"name":"Tail Recursion","slug":"Tail-Recursion","permalink":"https://pandaforme.github.io/tags/Tail-Recursion/"}]},{"title":"[Git] Moving A Git Repository To A New Server","slug":"Git-Moving-A-Git-Repository-To-A-New-Server","date":"2016-12-09T08:55:57.000Z","updated":"2016-12-13T07:26:07.000Z","comments":true,"path":"2016/12/09/Git-Moving-A-Git-Repository-To-A-New-Server/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Git-Moving-A-Git-Repository-To-A-New-Server/","excerpt":"","text":"[&#x66F4;&#x65B0;]&#x6709;&#x66F4;&#x7C21;&#x6F54;&#x7684;&#x505A;&#x6CD5;&#xFF0C;&#x8ACB;&#x53C3;&#x8003; Duplicating a repository &#x5728;&#x5DE5;&#x4F5C;&#x4E0A;&#x9047;&#x5230;&#x8981;&#x5C07;git repository&#x5F9E;&#x820A;&#x7684;server&#x8F49;&#x79FB;&#x5230;&#x65B0;&#x7684;sever&#xFF0C;&#x53C3;&#x8003;&#x9019;&#x7BC7;&#x6587;&#x7AE0;Moving A Git Repository To A New Server&#x9032;&#x884C;&#x8F49;&#x79FB;&#xFF0E; Step 1: fetch&#x6240;&#x6709;&#x7684;remote branch1git fetch origin Step 2: &#x5C07;&#x6240;&#x6709;remote branch clone&#x5230;&#x672C;&#x5730;&#x7AEF;12345for branch in `git branch -a | grep remotes | grep -v HEAD`; do git branch --track ${branch##*/} $branchdonegit fetch --allgit pull --all Step 3: &#x65B0;&#x589E;&#x65B0;&#x7684;repository&#xFF0C;&#x540D;&#x7A31;&#x70BA;new-origin1git remote add new-origin git@[new server url]:[group]/[project].git Step 4: push&#x6240;&#x6709;&#x7684;branch&#x548C;tag&#x5230;&#x65B0;&#x7684;repository12git push --all new-origingit push --tags new-origin Step 5: &#x780D;&#x6389;&#x820A;&#x7684;repository&#xFF0C;&#x4E26;&#x4E14;&#x65B0;&#x7684;repository&#x6539;&#x540D;&#x70BA;origin12git remote rm origingit remote rename new-origin origin &#x5C07;&#x4EE5;&#x4E0A;&#x7684;&#x64CD;&#x4F5C;&#x6B65;&#x9A5F;&#x5BEB;&#x6210;script:123456789101112131415#!/bin/bashrm -rf $1git clone git@old-repo:old-group/$1.gitcd $1git fetch originfor branch in `git branch -a | grep remotes | grep -v HEAD`; do git branch --track ${branch##*/} $branchdonegit fetch --allgit pull --allgit remote add new-origin git@new-repo:new-group/$1.gitgit push --all new-origingit push --tags new-origingit remote rm origingit remote rename new-origin origin &#x53C3;&#x8003;&#xFF1A; Moving A Git Repository To A New Server Clone all remote branches with Git? Duplicating a repository","categories":[{"name":"Git","slug":"Git","permalink":"https://pandaforme.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://pandaforme.github.io/tags/Git/"}]},{"title":"[AOP] Monitor Legacy System","slug":"AOP-Monitor-Legacy-System","date":"2016-12-09T08:48:00.000Z","updated":"2016-12-09T08:54:43.000Z","comments":true,"path":"2016/12/09/AOP-Monitor-Legacy-System/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/AOP-Monitor-Legacy-System/","excerpt":"","text":"&#x6700;&#x8FD1;&#x8981;&#x5728;&#x4E00;&#x500B;&#x820A;&#x7684;scala&#x7CFB;&#x7D71;&#x52A0;&#x5165;&#x4E00;&#x4E9B;&#x76E3;&#x63A7;&#x7684;&#x7A0B;&#x5F0F;&#x78BC;&#xFF0C;&#x627E;&#x51FA;&#x5F71;&#x97FF;&#x6548;&#x80FD;&#x7684;&#x5730;&#x65B9;&#xFF0E; &#x60F3;&#x4E86;&#x5169;&#x500B;&#x505A;&#x6CD5;&#x53EF;&#x4EE5;&#x89E3;&#x6C7A;&#xFF1A; &#x65B9;&#x6CD5;&#x4E00;&#xFF1A; &#x5728;&#x61F7;&#x7591;&#x7684;&#x7A0B;&#x5F0F;&#x78BC;&#x5730;&#x65B9;&#x4E0A;&#x4E0B;&#x593E;log&#xFF0C;&#x8A08;&#x7B97;&#x51FA;&#x57F7;&#x884C;&#x6642;&#x9593;&#xFF0E; &#x65B9;&#x6CD5;&#x4E8C;&#xFF1A; &#x5229;&#x7528;AOP&#x65B9;&#x5F0F;&#x6514;&#x622A;&#x6BCF;&#x500B;function&#x57F7;&#x884C;&#x6642;&#x958B;&#x59CB;&#x9EDE;&#x548C;&#x7D50;&#x675F;&#x9EDE;&#xFF0C;&#x8A08;&#x7B97;&#x51FA;&#x57F7;&#x884C;&#x6642;&#x9593;&#xFF0E; &#x4F86;&#x5206;&#x6790;&#x4E00;&#x4E0B;&#x9019;&#x5169;&#x500B;&#x65B9;&#x6CD5;&#x7684;&#x512A;&#x7F3A;&#x9EDE;&#xFF1A; &#x65B9;&#x6CD5;&#x4E00;&#xFF1A; &#x512A;&#x9EDE;&#xFF1A;&#x4E0D;&#x7528;&#x5927;&#x8166;&#x5C31;&#x53EF;&#x4EE5;&#x89E3;&#x6C7A; &#x7F3A;&#x9EDE;&#xFF1A;&#x9700;&#x8981;&#x5728;&#x6240;&#x6709;&#x7684;&#x9EDE;&#x63D2;&#x5165;log&#xFF0C;&#x9020;&#x6210;&#x7A0B;&#x5F0F;&#x5145;&#x6EFF;&#x4E00;&#x5806;log &#x65B9;&#x6CD5;&#x4E8C;&#xFF1A; &#x512A;&#x9EDE;&#xFF1A;&#x53EF;&#x4EE5;&#x4E0D;&#x7528;&#x52D5;&#x5230;&#x539F;&#x672C;&#x7684;&#x7A0B;&#x5F0F;&#x78BC; &#x7F3A;&#x9EDE;&#xFF1A;&#x9700;&#x8981;&#x5BEB;&#x4E00;&#x4E9B;&#x7A0B;&#x5F0F;&#x78BC; &#x5F8C;&#x4F86;&#x63A1;&#x7528;Aspectj&#x4F86;&#x89E3;&#x6C7A;&#x9019;&#x500B;&#x554F;&#x984C;. &#x65B0;&#x589E;&#x4E00;&#x500B;Monitor Aspect 12345678910111213141516171819202122232425262728package aspectj;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.slf4j.Logger;import org.slf4j.LoggerFactory;@Aspectpublic class MonitorAspect { private long startTime; private Logger logger = LoggerFactory.getLogger(MonitorAspect.class); @Before(value = &quot;execution (* *(..))&quot;, argNames = &quot;joinPoint&quot;) public void before(JoinPoint joinPoint) { startTime = System.currentTimeMillis(); } @After(value = &quot;execution (* *(..))&quot;, argNames = &quot;joinPoint&quot;) public void after(JoinPoint joinPoint) { long executionTime = System.currentTimeMillis() - startTime; logger.debug(&quot;Signature : {}, Source Line : {}, Execute Time : {}&quot;, joinPoint.getSignature(), joinPoint.getSourceLocation(), executionTime); }} &#x52A0;&#x5165;aspectj jar 12&quot;org.aspectj&quot; % &quot;aspectjweaver&quot; % &quot;1.8.7&quot;,&quot;org.aspectj&quot; % &quot;aspectjrt&quot; % &quot;1.8.7&quot; &#x5229;&#x7528;load time weaving&#x65B9;&#x5F0F;&#xFF0E;&#x9700;&#x8981;&#x5728;resource&#x8CC7;&#x6599;&#x593E;&#x4E0B;&#x65B0;&#x589E;META-INF/aop.xml 1234567891011&lt;aspectj&gt; &lt;aspects&gt; &lt;aspect name=&quot;aspectj.MonitorAspect&quot;/&gt; &lt;/aspects&gt; &lt;weaver options=&quot;-verbose -showWeaveInfo&quot;&gt; &lt;include within=&quot;xxx.yyy.*&quot;/&gt; &lt;include within=&quot;xxx.zzz.*&quot;/&gt; &lt;include within=&quot;aspectj.*&quot;/&gt; &lt;/weaver&gt;&lt;/aspectj&gt; &#x8A73;&#x7D30;&#x53C3;&#x6578;&#x53EF;&#x4EE5;&#x53C3;&#x8003;&#xFF1A;Chapter 5. Load-Time Weaving &#x56E0;&#x70BA;&#x820A;&#x7CFB;&#x7D71;&#x662F;&#x7528;java&#x555F;&#x52D5;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x52A0;&#x5165;javaagent&#x53C3;&#x6578;&#xFF0C;&#x6307;&#x5B9A;aspectjweaver.jar&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4F8B;&#x5982;&#xFF1A;java -javaagent=/jars/aspectjweaver-1.8.7.jar ... &#x5728;&#x5BE6;&#x4F5C;&#x904E;&#x7A0B;&#x4E2D;&#x9047;&#x5230;&#x4E86;&#x4E0D;&#x5C11;&#x7684;&#x5751;&#xFF0C;&#x7D00;&#x9304;&#x4E00;&#x4E0B;&#xFF1A; &#x7B2C;&#x4E00;&#x500B;&#x5751;&#xFF1A; &#x5728;&#x5BE6;&#x4F5C;Aspect&#x6642;&#xFF0C;Annotation&#x4E2D;&#x53EF;&#x4EE5;&#x51C6;&#x8A31;&#x4E0D;&#x7528;&#x5C0D;&#x6BCF;&#x500B;&#x53C3;&#x6578;&#x7D66;&#x503C;&#xFF0C;&#x4F46;&#x662F;&#x6703;&#x5674;&#x932F;&#x2026; &#x4EE5;&#x4E0B;&#x5BEB;&#x6CD5;&#x662F;&#x51C6;&#x8A31;&#x7684;&#xFF0C;&#x4F46;&#x662F;load time weaving&#x6642;&#x6703;&#x5674;&#x932F;1@Before(&quot;execution (* *(..))&quot;) &#x5F8C;&#x4F86;&#x6539;&#x6210;&#x4EE5;&#x4E0B;&#x5BEB;&#x6CD5;&#x5C31;&#x6C92;&#x4E8B;&#x4E86;1@Before(value = &quot;execution (* *(..))&quot;, argNames = &quot;joinPoint&quot;) &#x7B2C;&#x4E8C;&#x500B;&#x5751;&#xFF1A; &#x70BA;&#x4E86;&#x53EF;&#x4EE5;&#x52D5;&#x614B;&#x4FEE;&#x6539;aop.xml&#xFF0C;&#x5FC5;&#x9808;&#x5C07;&#x9019;&#x500B;&#x6A94;&#x6848;&#x5F9E;jar&#x62C9;&#x51FA;&#x4F86;&#x653E;&#xFF0E;&#x53EF;&#x4EE5;&#x900F;&#x904E;-Dorg.aspectj.weaver.loadtime.configuration=file:{aop.xml&#x4F4D;&#x7F6E;}&#x4F86;&#x6307;&#x5B9A;aop&#x4F4D;&#x7F6E;&#xFF0E; &#x4F46;&#x662F;&#x555F;&#x52D5;&#x7A0B;&#x5F0F;&#x6642;&#x537B;&#x53C8;&#x5674;&#x932F;java.lang.RuntimeException: Cannot register non aspect:...&#xFF0C;&#x539F;&#x56E0;&#x662F;javax.management.remote.rmi.NoCallStackClassLoader&#x4E0D;&#x80FD;&#x8F09;&#x5165;&#x6211;&#x5BEB;&#x597D;&#x7684;aspect&#xFF0E;&#xFF08;&#x9019;&#x908A;&#x65E5;&#x5F8C;&#x6709;&#x6642;&#x9593;&#x9700;&#x8981;&#x4F86;&#x7814;&#x7A76;&#x4E00;&#x4E0B;&#xFF0C;&#x61C9;&#x8A72;&#x662F;&#x57F7;&#x884C;&#x9806;&#x5E8F;&#x7684;&#x554F;&#x984C;&#x2026;&#xFF09; &#x900F;&#x904E;-Daj.weaving.loadersToSkip=javax.management.remote.rmi.NoCallStackClassLoader&#x7565;&#x904E;&#x5B83;&#x5C31;&#x53EF;&#x4EE5;&#x57F7;&#x884C;&#x4E86;&#xFF0E;&#x8A73;&#x7D30;&#x53EF;&#x53C3;&#x8003;&#xFF1A;AspectJ: ClassLoading issue when trying to use external aop.xml file &#x7B2C;&#x4E09;&#x500B;&#x5751;&#xFF1A; &#x4E00;&#x958B;&#x59CB;&#x6C92;&#x6709;&#x5728;aop.xml&#x7684;weaver tag&#x4E2D;&#x52A0;&#x5165;MonitorAspect&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x53C8;&#x5674;&#x932F;java.lang.NoSuchMethodError: aspectj.MonitorAspect.aspectOf()Laspectj/MonitorAspect&#x52A0;&#x5165;MonitorAspect&#x7684;&#x4F4D;&#x7F6E;&#x5C31;&#x6B63;&#x5E38;&#x4E86;&#xFF01;&#x8A73;&#x7D30;&#x53EF;&#x53C3;&#x8003;&#xFF1A;AspectJ java.lang.NoSuchMethodError: aspectOf &#x7B2C;&#x56DB;&#x500B;&#x5751;&#xFF1A; &#x70BA;&#x4E86;&#x53EF;&#x4EE5;&#x5728;aop.xml&#x52D5;&#x614B;&#x6307;&#x5B9A;&#x8981;waving&#x7684;type&#xFF0C;&#x5343;&#x842C;&#x4E0D;&#x80FD;&#x5728;annotation&#x7684;value&#x6B04;&#x4F4D;&#x5BEB;&#x6B7B;&#xFF0E; &#x4F8B;&#x5982;&#xFF1A;1@Before(value = &quot;execution (* xxx.yyy.*(..))&quot;, argNames = &quot;joinPoint&quot;) 1234567891011&lt;aspectj&gt; &lt;aspects&gt; &lt;aspect name=&quot;aspectj.MonitorAspect&quot;/&gt; &lt;/aspects&gt; &lt;weaver options=&quot;-verbose -showWeaveInfo&quot;&gt; &lt;include within=&quot;xxx.yyy.*&quot;/&gt; &lt;include within=&quot;xxx.zzz.*&quot;/&gt; &lt;include within=&quot;aspectj.*&quot;/&gt; &lt;/weaver&gt;&lt;/aspectj&gt; &#x7D50;&#x679C;&#xFF1A;&#x53EA;&#x80FD;waving&#x5230;xxx.yyy.*&#xFF0C;&#x4E0D;&#x80FD;waving xxx.zzz.* &#x6539;&#x6210;&#x4EE5;&#x4E0B;&#xFF1A;1@Before(value = &quot;execution (* *(..))&quot;, argNames = &quot;joinPoint&quot;) 1234567891011&lt;aspectj&gt; &lt;aspects&gt; &lt;aspect name=&quot;aspectj.MonitorAspect&quot;/&gt; &lt;/aspects&gt; &lt;weaver options=&quot;-verbose -showWeaveInfo&quot;&gt; &lt;include within=&quot;xxx.yyy.*&quot;/&gt; &lt;include within=&quot;xxx.zzz.*&quot;/&gt; &lt;include within=&quot;aspectj.*&quot;/&gt; &lt;/weaver&gt;&lt;/aspectj&gt; &#x7D50;&#x679C;&#xFF1A;&#x53EF;&#x4EE5;waving&#x5230;xxx.yyy.*&#x548C;xxx.zzz.* &#x5FC3;&#x5F97;&#xFF1A;AOP&#x7684;&#x6982;&#x5FF5;&#x771F;&#x7684;&#x5F88;&#x5F37;&#x5927;&#xFF0C;&#x53EF;&#x4EE5;&#x8B93;&#x4F60;&#x4E0D;&#x8CBB;&#x5439;&#x7070;&#x4E4B;&#x529B;&#x53BB;&#x76E3;&#x63A7;Legacy System&#xFF0E;&#x4E0D;&#x7528;&#x66F4;&#x6539;&#x820A;&#x6709;&#x7A0B;&#x5F0F;&#xFF0C;&#x4E5F;&#x4E0D;&#x6703;&#x6709;&#x591A;&#x9918;&#x4E14;&#x91CD;&#x8907;&#x7684;&#x7A0B;&#x5F0F;&#x78BC;&#xFF0C;&#x4E4B;&#x5F8C;&#x53EF;&#x4EE5;&#x4F86;&#x60F3;&#x770B;&#x770B;&#x6709;&#x4EC0;&#x9EBC;&#x5730;&#x65B9;&#x53EF;&#x4EE5;&#x5229;&#x7528;AOP&#xFF0E; &#x56E0;&#x70BA;scala&#x7248;&#x672C;&#x592A;&#x820A;&#x4E86;(2.9.1, jdk 6)&#xFF0C;&#x5229;&#x7528;compile weaving&#x65B9;&#x5F0F;&#x5931;&#x6557;&#x4E86;&#xFF0C;&#x53EA;&#x597D;&#x7528;load time weaving&#x65B9;&#x5F0F;&#xFF0E;&#x5047;&#x5982;&#x63A1;&#x7528;&#x8F03;&#x65B0;&#x7684;scala&#x7248;&#x672C;&#x6216;&#x8A31;&#x53EF;&#x4EE5;&#x8003;&#x616E; sbt-aspectj&#xFF0E; &#x53C3;&#x8003;&#xFF1A; AspectJ with Akka and Scala AspectJ: ClassLoading issue when trying to use external aop.xml file AspectJ java.lang.NoSuchMethodError: aspectOf Chapter 5. Load-Time Weaving sbt-aspectj","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"},{"name":"AOP","slug":"AOP","permalink":"https://pandaforme.github.io/tags/AOP/"}]},{"title":"[Jersey] RESTful service starter-kit (2)","slug":"Jersey-RESTful-service-starter-kit-2","date":"2016-12-09T08:45:14.000Z","updated":"2016-12-13T07:19:56.000Z","comments":true,"path":"2016/12/09/Jersey-RESTful-service-starter-kit-2/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Jersey-RESTful-service-starter-kit-2/","excerpt":"","text":"&#x5982;&#x4F55;&#x8A2D;&#x5B9A;Custom Injection&#x5834;&#x666F;&#xFF1A;client&#x767C;&#x9001;get request&#xFF0C;&#x6703;&#x5728;header&#x5E36;&#x4E00;&#x500B;userId&#xFF0C;server&#x6703;&#x6839;&#x64DA;userId&#x53BB;&#x8CC7;&#x6599;&#x5EAB;&#x67E5;&#x8A62;&#x76F8;&#x95DC;user&#xFF0E;&#x4F8B;&#x5982;&#xFF1A;1curl -H &apos;userId: 89ce5a60-a88f-11e5-a837-0800200c9a66&apos; http://localhost:8080/user PS:&#x6B63;&#x898F;&#x7684;&#x505A;&#x6CD5;&#x662F;&#x628A;userId&#x653E;&#x5728;uri path&#x4E2D;&#xFF0C;&#x9019;&#x908A;&#x53EA;&#x662F;&#x6A21;&#x64EC;&#x5F9E;header&#x6293;&#x53D6;&#x8CC7;&#x6599;&#x9032;&#x884C;&#x8655;&#x7406;&#xFF0C;&#x4E4B;&#x5F8C;&#x53EF;&#x4EE5;&#x900F;&#x904E;annotation&#x65B9;&#x5F0F;&#x5C07;&#x7D50;&#x679C;&#x653E;&#x5230;resource &#x5B9A;&#x7FA9;annotation 1234@Retention(RetentionPolicy.RUNTIME)@Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD})public @interface UserParam {} &#x5B9A;&#x7FA9;ValueFactoryProvider 123456789101112131415161718192021222324252627282930313233343536373839@Singleton@Slf4j //lombok annotationpublic final class UserParamValueFactoryProvider extends AbstractValueFactoryProvider { @Singleton public static final class InjectionResolver extends ParamInjectionResolver&lt;UserParam&gt; { public InjectionResolver() { super(UserParamValueFactoryProvider.class); } } @Inject public UserParamValueFactoryProvider(MultivaluedParameterExtractorProvider mpep, ServiceLocator injector) { super(mpep, injector, Parameter.Source.UNKNOWN); } @Override public AbstractContainerRequestValueFactory&lt;?&gt; createValueFactory(Parameter parameter) { Class&lt;?&gt; classType = parameter.getRawType(); if (classType == null || (!classType.equals(User.class))) { log.warn(&quot;UserParam annotation was not placed on correct object type; Injection might not work correctly!&quot;); return null; } return new AbstractContainerRequestValueFactory&lt;User&gt; (){ @Context private ResourceContext context; @Inject private Repo repo; public User provide() { final ContainerRequestContext context = this.context.getResource(ContainerRequestContext.class); final UUID userId = UUID.fromString(context.getHeaderString(&quot;userId&quot;)); return repo.getUser(userId); } }; }} Repo123public interface Repo { User getUser(UUID uuid);} RepoFactory1234567891011public class RepoFactory implements Factory&lt;Repo&gt; { @Override public Repo provide() { return new DummyRepo(); } @Override public void dispose(Repo instance) { }} bind UserParamValueFactoryProvider bind(UserParamValueFactoryProvider.class).to(ValueFactoryProvider.class).in(Singleton.class);12bind(UserParamValueFactoryProvider.InjectionResolver.class).to(new TypeLiteral&lt;InjectionResolver&lt;UserParam&gt;&gt;() {}).in(Singleton.class);bindFactory(RepoFactory.class).to(Repo.class).in(Singleton.class); &#x900F;&#x904E;annotation&#x53D6;&#x5F97;User 123456@GET@ApiOperation(value = &quot;Return user data&quot;, response = User.class)public Response user(@NotNull @Valid @UserParam User user) { return Response.ok(user, MediaType.APPLICATION_JSON) .build();} &#x5982;&#x4F55;&#x8A2D;&#x5B9A;Swagger API&#x56E0;&#x70BA;&#x662F;&#x900F;&#x904E;ResourceConfig&#x53BB;&#x8A2D;&#x5B9A;JAX-RS&#xFF0C;&#x6240;&#x4EE5;&#x53EA;&#x8981;&#x5C07;&#x4EE5;&#x4E0B;&#x7A0B;&#x5F0F;&#x78BC;&#x52A0;&#x5165;&#x5230;ResourceConfig&#x5C31;&#x5B8C;&#x6210;Swagger API&#x8A2D;&#x5B9A;123456789101112register(ApiListingResourceJSON.class);register(SwaggerSerializers.class);BeanConfig beanConfig = new BeanConfig();beanConfig.setVersion(&quot;1.0.1&quot;);beanConfig.setResourcePackage(&quot;rest&quot;); // replace with your packagesbeanConfig.setBasePath(&quot;http://localhost:8080/jersey-starterkit/&quot;);beanConfig.setDescription(&quot;My RESTful resources&quot;);beanConfig.setTitle(&quot;My RESTful API&quot;);beanConfig.setFilterClass(ApiAuthorizationFilterImpl.class.getName());beanConfig.setPrettyPrint(true);beanConfig.setScan(true); &#x5047;&#x5982;&#x60F3;&#x8981;&#x7528;apiKey&#x9650;&#x5236;&#x4F7F;&#x7528;&#x8005;&#x5B58;&#x53D6;swagger.json&#xFF0C;&#x53EF;&#x4EE5;&#x7E7C;&#x627F;SwaggerSpecFilter&#xFF0C;&#x5728;beanConfig.setFilterClass&#x8A2D;&#x5B9A;&#x8DEF;&#x5F91;&#x5373;&#x53EF;&#xFF0E; &#x547C;&#x53EB;swagger.json&#xFF1A;1curl http://localhost:8080/swagger.json &#x7A0B;&#x5F0F;&#x78BC;&#xFF1A;jersey-starterkit &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; How to inject an object into jersey request context? Chapter 22. Custom Injection and Lifecycle Management How to bind custom context to Jersey request Using HK2 with Jersey (with auto-scanning!) Swagger","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"},{"name":"Jersey","slug":"Jersey","permalink":"https://pandaforme.github.io/tags/Jersey/"}]},{"title":"[Jersey] Using HK2 to inject services into background tasks","slug":"Jersey-Using-HK2-to-inject-services-into-background-tasks","date":"2016-12-09T08:43:00.000Z","updated":"2016-12-09T08:44:02.000Z","comments":true,"path":"2016/12/09/Jersey-Using-HK2-to-inject-services-into-background-tasks/","link":"","permalink":"https://pandaforme.github.io/2016/12/09/Jersey-Using-HK2-to-inject-services-into-background-tasks/","excerpt":"","text":"Jersey&#x63A1;&#x7528;HK2&#x4F5C;&#x70BA;Dependency Injection framework&#xFF0C;&#x53EF;&#x4EE5;&#x900F;&#x904E;&#x7C21;&#x55AE;&#x7684;&#x8A2D;&#x5B9A;&#x5C07;&#x5BE6;&#x4F5C;&#x7684;&#x7A0B;&#x5F0F;inject&#x5230;interface&#xFF0E;&#x6709;&#x4F7F;&#x7528;&#x904E;&#x9019;&#x6A23;&#x529F;&#x80FD;&#x7684;&#x4F7F;&#x7528;&#x8005;&#x6703;&#x767C;&#x73FE;&#x5230;&#xFF0C;&#x50C5;&#x9650;&#x65BC;Restful layer&#x53EF;&#x4EE5;&#x505A;inject&#xFF0C;&#x975E;Restful layer&#x5C31;&#x4E0D;&#x80FD;inject&#xFF0E; &#x4F8B;&#x5982;&#xFF1A; Interface:1234@Contractpublic interface Bar { void bar();} Implement Bar1234567@Servicepublic class BarImpl implements Bar { @Override public void bar() { log.info(&quot;Bar&quot;); }} Background task123456789101112public class CrazyThread { @Inject Bar bar; public void run() { new Thread(() -&gt; { while (true) { bar.bar(); } }).start(); }} Inject BarImpl into Bar123456789101112public class MyApplication extends ResourceConfig { public MyApplication() { this.register(new AbstractBinder() { @Override protected void configure() { bind(BarImpl.class).to(Bar.class).in(Singleton.class); }); new CrazyThread().run(); }} &#x6703;&#x767C;&#x73FE;&#x6C92;&#x6709;&#x8FA6;&#x6CD5;&#x9806;&#x5229;&#x5C07;BarImpl&#x6CE8;&#x5C04;&#x5230;Bar&#xFF0C;&#x56E0;&#x70BA;CraztThread&#x4E26;&#x4E0D;&#x5728;container&#x4E2D;&#xFF0C;&#x6240;&#x4EE5;&#x6C92;&#x6709;&#x8FA6;&#x6CD5;&#x9806;&#x5229;&#x6CE8;&#x5C04;&#xFF0E; &#x9996;&#x5148;&#xFF0C;&#x6211;&#x5011;&#x53EF;&#x4EE5;&#x900F;&#x904E;HK2 Metadata Generator&#x5E6B;&#x6211;&#x5011;&#x9054;&#x6210;&#xFF0C;&#x5B83;&#x6703;&#x7522;&#x751F;&#x6CE8;&#x5C04;&#x7684;&#x8A2D;&#x5B9A;&#x6A94;&#x5230;META-INF/hk2-locator/default&#x4E0B;&#xFF0E;&#x8981;&#x78BA;&#x8A8D;Jersey&#x4F7F;&#x7528;&#x7684;hk2&#x7248;&#x672C;&#xFF0C;&#x518D;&#x532F;&#x5165;&#x76F8;&#x95DC;&#x7684;jar&#x6A94;&#xFF0E;&#x4F8B;&#x5982;&#xFF1A;jersey 2.22.1&#x4F7F;&#x7528;&#x7684;hk2&#x7248;&#x672C;&#x70BA;2.4.0-b31&#xFF0C;hk2-utils&#xFF0C;hk2-api&#xFF0C;hk2-metadata-generator&#x4E00;&#x5B9A;&#x8981;&#x70BA;2.4.0-b31&#xFF0E;1234compile &apos;javax.inject:javax.inject:1&apos;compile group: &apos;org.glassfish.hk2&apos;, name: &apos;hk2-utils&apos;, version: &apos;2.4.0-b31&apos;compile group: &apos;org.glassfish.hk2&apos;, name: &apos;hk2-api&apos;, version: &apos;2.4.0-b31&apos;compile group: &apos;org.glassfish.hk2&apos;, name: &apos;hk2-metadata-generator&apos;, version: &apos;2.4.0-b31&apos; &#x4FEE;&#x6539;CrazyThread&#xFF0C;&#x52A0;&#x5165;@Service12345678910111213@Servicepublic class CrazyThread { @Inject Bar bar; public void run() { new Thread(() -&gt; { while (true) { bar.bar(); } }).start(); }} &#x6700;&#x5F8C;&#x4FEE;&#x6539;MyApplication&#xFF0C;&#x900F;&#x904E;ServiceLocator&#x53D6;&#x5F97;CrazyThread1234567public class MyApplication extends ResourceConfig { public MyApplication() { ServiceLocator serviceLocator = ServiceLocatorUtilities.createAndPopulateServiceLocator(); final CrazyThread crazyThread = serviceLocator.getService(CrazyThread.class); crazyThread.run(); }} &#x5927;&#x529F;&#x544A;&#x6210;&#xFF01;&#xFF01;&#xFF01; &#x5F8C;&#x8A18;&#x5728;Jersey&#x4E2D;&#x4F7F;&#x7528;HK2&#x9019;&#x500B;&#x554F;&#x984C;&#x56F0;&#x60F1;&#x6211;&#x5F88;&#x4E45;&#xFF0C;&#x5F88;&#x591A;&#x6C92;&#x6709;&#x5728;resource&#x5C64;&#x4F7F;&#x7528;&#x5230;&#x7684;&#x7A0B;&#x5F0F;&#xFF0C;&#x5C31;&#x6C92;&#x6709;&#x8FA6;&#x6CD5;&#x900F;&#x904E;hk2&#x6CE8;&#x5165;&#xFF0E;Using HK2 with Jersey (with auto-scanning!)&#x9019;&#x7BC7;&#x6587;&#x7AE0;&#x6709;&#x63D0;&#x5230;&#x600E;&#x9EBC;&#x89E3;&#x6C7A;&#x9019;&#x500B;&#x554F;&#x984C;&#xFF0C;&#x53EF;&#x80FD;&#x662F;&#x65E9;&#x671F;&#x7248;&#x672C;&#x7684;hk2&#x5FC5;&#x9808;&#x624B;&#x52D5;&#x53BB;hack&#xFF0C;&#x5617;&#x8A66;&#x4ED6;&#x7684;&#x505A;&#x6CD5;&#x4E0D;&#x80FD;&#x9806;&#x5229;&#x57F7;&#x884C;&#xFF0E;&#x5F8C;&#x4F86;&#x53C3;&#x8003;&#x4E86;jersey + grizzly + hk2: Dependency injection, but not into resource&#x548C;khasunuma/hk2-sample&#x624D;&#x89E3;&#x6C7A;&#x9019;&#x500B;&#x554F;&#x984C;&#x2026; &#x53C3;&#x8003;&#x8CC7;&#x6599;&#xFF1A; Using HK2 with Jersey (with auto-scanning!) jersey + grizzly + hk2: Dependency injection, but not into resource khasunuma/hk2-sample HK2 Metadata Generator","categories":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://pandaforme.github.io/tags/Java/"},{"name":"Jersey","slug":"Jersey","permalink":"https://pandaforme.github.io/tags/Jersey/"},{"name":"HK2","slug":"HK2","permalink":"https://pandaforme.github.io/tags/HK2/"}]}]}